# 3.Run algorithm on USPS data, evaluate results using cross validation
train.3<-read.table("train_3.txt",header = FALSE, sep=",")
train.8<-read.table("train_8.txt",header = FALSE, sep=",")
xtrain<-rbind(as.matrix(train.3),as.matrix(train.8))
ytrain<-as.matrix(rep(c(-1,1),c(nrow(train.3),nrow(train.8))))
test<-as.matrix(read.table("zip_test.txt"))
ytest<-test[,1]
xtest<-test[ytest==3|ytest==8,-1]
ytest<-as.matrix(ytest[ytest==3|ytest==8])
ytest[ytest==3]<--1
ytest[ytest==8]<-1
View(xtrain)
View(xtest)
dim(xtest)
dim(xtrain)
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[testIndex,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[testIndex] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytest[trainIndex] != c_hat_train)
}
}
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[validation_Index,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[validation_Index] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytest[trainIndex] != c_hat_train)
}
}
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
trainErrorRate
allPars
alpha
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[validation_Index,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[validation_Index] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytest[trainIndex] != c_hat_train)
}
}
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
trainErrorRate
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[validation_Index,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[validation_Index] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytrain[trainIndex] != c_hat_train)
}
}
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(testErrorRate,type="l",lty=1:nCV,main="Validation Error",xlab="Number of base classifiers",ylab="error rate")
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[validation_Index,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[validation_Index] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytrain[trainIndex] != c_hat_train)
}
}
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(validation_ErrorRate,type="l",lty=1:nCV,main="Validation Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
plot(validation_ErrorRate,type="l",lty=1:nCV,main="Average Validation Error",xlab="Number of base classifiers",ylab="error rate")
B=40
ada_test <- adaboost(xtest,ytest,B)
allPars<-ada$allPars
alpha<-ada$alpha
c_hat_test<-agg_class(xtest[testIndex,],alpha[1:B],allPars[1:B])
B=40
ada_test <- adaboost(xtest,ytest,B)
allPars<-ada$allPars
alpha<-ada$alpha
c_hat_test<-agg_class(xtest,alpha[1:B],allPars[1:B])
test_ErrorRate[B,i]<-mean(ytest != c_hat_validation)
B=40
ada_test <- adaboost(xtest,ytest,B)
allPars<-ada$allPars
alpha<-ada$alpha
c_hat_test<-agg_class(xtest,alpha[1:B],allPars[1:B])
test_ErrorRate[B,i]<-mean(ytest != c_hat_test)
n<-nrow(xtrain)
B_max<-100
nCV<-5
set.seed(1)
validation_ErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
validation_Index<-p[-(1:round(n/2))]
ada<-adaboost(xtrain[trainIndex,],ytrain[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_validation<-agg_class(xtrain[validation_Index,],alpha[1:B],allPars[1:B])
validation_ErrorRate[B,i]<-mean(ytrain[validation_Index] != c_hat_validation)
c_hat_train<-agg_class(xtrain[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(ytrain[trainIndex] != c_hat_train)
}
}
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(validation_ErrorRate,type="l",lty=1:nCV,main="Validation Test Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
plot(validation_ErrorRate,type="l",lty=1:nCV,main="Average Validation Error",xlab="Number of base classifiers",ylab="error rate")
# 3.Run algorithm on USPS data, evaluate results using cross validation
train.3<-read.table("train_3.txt",header = FALSE, sep=",")
train.8<-read.table("train_8.txt",header = FALSE, sep=",")
xtrain<-rbind(as.matrix(train.3),as.matrix(train.8))
ytrain<-as.matrix(rep(c(-1,1),c(nrow(train.3),nrow(train.8))))
test<-as.matrix(read.table("zip_test.txt"))
ytest<-test[,1]
xtest<-test[ytest==3|ytest==8,-1]
ytest<-as.matrix(ytest[ytest==3|ytest==8])
ytest[ytest==3]<--1
ytest[ytest==8]<-1
# combine train and test for future cv
X<-rbind(xtrain,xtest)
Y<-rbind(ytrain,ytest)
n<-nrow(X)
B_max<-100
nCV<-5
set.seed(1)
testErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
testIndex<-p[-(1:round(n/2))]
ada<-adaboost(X[trainIndex,],Y[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_test<-agg_class(X[testIndex,],alpha[1:B],allPars[1:B])
testErrorRate[B,i]<-mean(Y[testIndex] != c_hat_test)
c_hat_train<-agg_class(X[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(Y[trainIndex] != c_hat_train)
}
}
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(validation_ErrorRate,type="l",lty=1:nCV,main="Validation Test Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(testErrorRate,type="l",lty=1:nCV,main="Test Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
validation_ErrorRate <- apply(validation_ErrorRate,1,FUN = mean)
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(testErrorRate,type="l",lty=1:nCV,main="Cross Validation Test Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
Average_testErrorRate <- apply(testErrorRate,1,FUN = mean)
plot(Average_testErrorRate,type="l",lty=1:nCV,main="Average Validation Error",xlab="Number of base classifiers",ylab="error rate")
n<-nrow(X)
B_max<-100
nCV<-5
set.seed(1)
testErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
trainErrorRate<-matrix(0,nrow=B_max,ncol=nCV)
for (i in 1:nCV){
p<-sample.int(n)
trainIndex<-p[1:round(n/2)]
testIndex<-p[-(1:round(n/2))]
ada<-adaboost(X[trainIndex,],Y[trainIndex],B_max)
allPars<-ada$allPars
alpha<-ada$alpha
# error rate
for(B in 1:B_max){
c_hat_test<-agg_class(X[testIndex,],alpha[1:B],allPars[1:B])
testErrorRate[B,i]<-mean(Y[testIndex] != c_hat_test)
c_hat_train<-agg_class(X[trainIndex,],alpha[1:B],allPars[1:B])
trainErrorRate[B,i]<-mean(Y[trainIndex] != c_hat_train)
}
}
# 4. Plot train error and test error
matplot(trainErrorRate,type="l",lty=1:nCV,main="Cross Validation Training Error",xlab="Number of base classifiers",ylab="error rate")
matplot(testErrorRate,type="l",lty=1:nCV,main="Cross Validation Test Error",xlab="Number of base classifiers",ylab="error rate")
# sum up the validation error rate for different B
Average_testErrorRate <- apply(testErrorRate,1,FUN = mean)
plot(Average_testErrorRate,type="l",lty=1:nCV,main="Average Validation Error",xlab="Number of base classifiers",ylab="error rate")
install.packages(D3)
install.packages("D3")
install.packages("d3.js")
install.packages("d3r")
install.packages("survival")
library(survival)
survival::colon
data = survival::colon
View(data)
summary(data)
data survival::cancer
data = survival::cancer
summary(data)
dim(dat)
dim(data)
knitr::opts_chunk$set(echo = TRUE)
data <- survival::cancer
data$status <- factor(data$status)
data$sex <- factor(data$sex)
sur <- survfit(Surv(data$time,data$status)~1,type=type="kaplan-meier")
sur <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
sur$surv
data$sex
data$sex[data$sex == 2] =0
data$sex
library(surviva)
data <- survival::cancer
data$status <- factor(data$status)
data$sex[data$sex == 2] = 0
data$sex
is.na(data)
is.na(data) == True
is.na(data) == TRUE
data <- na.omit(data)
data
summary(data)
dim(data)
library(surviva)
library(survival)
data <- survival::cancer
data <- na.omit(data)
data$status <- as.factor(data$status)
data$sex[data$sex == 2] = 0
data$sex <- as.factor(data$sex)
sur <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
sur$surv
sur <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
sur
km <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
km$surv
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
library(survival)
data <- survival::cancer
data <- na.omit(data)
data$status <- as.factor(data$status)
data$sex[data$sex == 2] = 0
data$sex <- as.factor(data$sex)
km <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
km
summary(km)
fit <- coxph(Surv(data$time,data$status)~data$age+data$sex+data$ph.ecog+data$ph.karno+data$meal.cal)
fit <- coxph(Surv(data$time,data$status)~data$age+data$sex+data$ph.ecog+data$ph.karno+data$meal.cal)
library(survival)
data <- survival::cancer
data <- na.omit(data)
data$status <- as.factor(data$status)
data$sex[data$sex == 2] = 0
data$sex <- as.factor(data$sex)
km <- survfit(Surv(data$time,data$status)~1,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- coxph(Surv(data$time,data$status)~data$age+data$sex+data$ph.ecog+data$ph.karno+data$meal.cal)
fit <- coxph(Surv(data$time,data$status)~data$age+data$sex+data$ph.ecog+data$ph.karno+data$meal.cal)
fit <- coxph(Surv(time,status) ~ age + sex + ph.ecog + ph.karno + meal.cal,data = data)
fit <- coxph(Surv(time,status) ~ age + sex + ph.ecog + ph.karno,data = data)
fit <- coxph(Surv(time,status) ~ age + sex,data = data)
fit <- coxph(Surv(time,status) ~ age,data = data)
data$sex
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~sex)
fit <- survfit(Surv(time,status)~sex)
plot(fit,lty=1:2,col=1:2)
fit <- survfit(Surv(time,status)~factor(sex))
plot(fit,lty=1:2,col=1:2)
fit <- survfit(Surv(time,status)~1)
plot(fit,lty=1:2,col=1:2)
fit <- survfit(Surv(time,status)~1)
plot(fit,lty=1:2,col=1:2)
km <- survfit(Surv(time,status)~1,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~1,data=data)
plot(fit,lty=1:2,col=1:2)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+$wt.loss,data=data)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
setwd("C:/Users/cheny/Desktop/study/second term/Statistical Method In Finance/final project")
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
library('forecast')
library('tseries')
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
BitCoin <- read.xlsx("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
library(xlsx)
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
library(xlsx)
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
library(xlsx)
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c("Low","Close","Volume","Market Cap"))
library(xlsx)
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1)
colnames(BitCoin) <- c("Low","Close","Volume","Market Cap")
head(BitCoin)
library(xlsx)
BitCoin <- read.xlsx2("bitcoin price.xlsx",sheetIndex = 1,colClasses = c('Date','numeric','numeric','numeric','numeric'))
colnames(BitCoin) <- c("Date","Low","Close","Volume","Market Cap")
head(BitCoin)
ggplot(data = BitCoin,aes(y=BitCoin$Close,x=BitCoin$Date))+
geom_line(col='Black')
# decompose the data
BitCoin_ma <- ts(na.omit(BitCoin$Close),frequency = 30)
decomp <- stl(BitCoin_ma,s.window = 'periodic')
deseasonal_BitCoin <- seasadj(decomp)
plot(decomp)
adf.test(BitCoin_ma,alternative = 'stationary')
knitr::opts_chunk$set(echo = TRUE)
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
``
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
data
setwd("C:/Users/cheny/Desktop/study/second term/Advanced Data Analysis/final project")
write.csv(data,"Data.csv")
?plot
knitr::opts_chunk$set(echo = TRUE)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
fit <- survfit(Surv(time,status)~sex,data=data)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"))
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"))
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"),bty="n",ncol=2,cex=0.7,pt.cex=0.7)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"),bty="n",ncol=2,cex=1,pt.cex=0.7)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"),col=c("r","b"),bty="n",ncol=2,cex=1,pt.cex=0.7)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"),col=1:2,bty="n",ncol=2,cex=1,pt.cex=0.7)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("male","female"),lty=1:2,col=1:2,bty="n",ncol=2,cex=1,pt.cex=0.7)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("female","male"),lty=1:2,col=1:2,bty="n",ncol=2,cex=1,pt.cex=0.7)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2,main = "Survival function plot for male patient and female patient",xlab = "time",ylab = "probability")
legend("topright",legend= c("female","male"),lty=1:2,col=1:2,bty="n",ncol=2,cex=1,pt.cex=0.7)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+ph.karno+wt.loss,data=data)
summary(fitphm)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+ph.karno,data=data)
summary(fitphm)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog,data=data)
summary(fitphm)
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
knitr::opts_chunk$set(echo = TRUE)
library(survival)
data <- survival::cancer
data <- na.omit(data)
status <- as.factor(data$status)
time <- data$time
data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time (day)",ylab="Survival",main="survival function",lwd=2,,cex.axis=1.5,cex.lab=1.5)
text(80,0.2,"One month")
text(410,0.2,"One year")
text(780,0.2,"two years")
abline(v=30, lty=2, lwd=2, col="red")
abline(v=365, lty=2, lwd=2, col="blue")
abline(v=730, lty=2, lwd=2, col="green")
