statedata=as.data.frame(state.x77)
library(datasets)
statedata=as.data.frame(state.x77)
View(statedata)
colnames(statedata)=c("popu", "inc", "illit", "life.exp", "murder", "hs.grad", "frost", "area")
plot(life.exp~inc, data=statedata)
cor(statedata[,"life.exp"], statedata[,"inc"])
plot(life.exp~inc, data=statedata, type="n")
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata, state.abb)
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata)
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata, state.abb)
state.abb
model1=lm(life.exp~inc, data=statedata)
summary(model1)
plot(life.exp~inc, data=statedata,
xlab="Life Expectancy", ylab="Income")
abline(model1)
par(mfrow=c(2,2)) # create a panel of four plotting areas
for(i in 1:4){
## Plot the population
plot(life.exp~inc, data=statedata,
xlab="Life Expectancy", ylab="Income",
title=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(model1)
if(i==1){
legend(3030, 74.2,
pch=c(NA, NA, NA, 1, 16),
lty=c(1, 1, 2, NA, NA),
col=c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex=0.7,
bty="n"
)
}
## Select the sample
selected.states=sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states,"life.exp"], pch=16, col=2)
## Fit a regression line using the sample
model.sel = lm(life.exp~inc, data=statedata[selected.states,])
abline(model.sel, col=2)
## Make a confidence band.
#### first calculate the width of the band, W.
ww=qt(0.975, 10-2)
#### generate plotting X values.
plot.x<-data.frame(inc=seq(3000, 7000, 1))
#### se.fit=T is an option to save
#### the standard error of the fitted values.
plot.fit<-predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
#### lines is a function to add connected lines
#### to an existing plot.
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
library(MASS)
library(ISLR)
download.packages("ISLR")
download.packages(ISLR)
download.packages('ISLR')
download.packages("destdir")
install.packages("ISLR")
library(ISLR)
attach(Boston)
lm.fit=lm(medv ~ lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
lm.fit1=lm(medv ~.-age,data=Boston)
summary(lm.fit1)
summary(lm(medv ~ lstat*age,data=Boston))
plot(lstat, medv, pch=16)
lm.fit2=lm(medv ~ lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit ,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
names(Carseats )
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
iris = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data", sep = ",", header = FALSE)
names(iris) = c("sepal.length", "sepal.width", "petal.length", "petal.width", "iris.type")
### attach name to each column so that we can directly access each column by its name
attach(iris)
train = sample.int(nrow(iris), 100)
plot(sepal.length[train], sepal.width[train], type='p',pch=16, col=(Y[train]+4), xlab="Sepal Length", ylab="Sepal Width")
Y = iris.type == "Iris-setosa"
logistic.model = glm(Y ~ sepal.length + sepal.width, data=iris, family = binomial(), subset=train)
logistic.model
plot(sepal.length[train], sepal.width[train], type='p',pch=16, col=(Y[train]+4), xlab="Sepal Length", ylab="Sepal Width")
abline(a = -logistic.model$coefficients[1]/logistic.model$coefficients[3], b = -logistic.model$coefficients[2]/logistic.model$coefficients[3], col='gray', lwd=2)
glm.probs = predict(logistic.model, iris[-train,], type="response")
glm.pred = glm.probs>0.5
### summrize the prediction by a confusion matrix
table(Y[-train], glm.pred)
library(MASS)
lda.model<-lda(Y ~ sepal.length + sepal.width, data=iris, subset=train)
lda.model
plot(lda.model)
lda.pred = predict(lda.model, iris[-train,])
table(Y[-train], lda.pred$class)
Carseats
iris = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data", sep = ",", header = FALSE)
names(iris) = c("sepal.length", "sepal.width", "petal.length", "petal.width", "iris.type")
### attach name to each column so that we can directly access each column by its name
attach(iris)
train
knitr::opts_chunk$set(echo = TRUE)
#input the data
social_economics <- c(rep('low',4),rep('Median',4),rep('high',4))
Boy_Scout <- c(rep(c(rep('Yes',2),rep('No',2)),3))
deliquency <- c(rep(c('Yes','No'),6))
frequency <- c(10,40,40,160,18,132,18,132,8,192,2,48)
data <- as.data.frame(cbind(social_economics,Boy_Scout,deliquency,frequency))
social_economics <- factor(c(rep('low',2),rep('Median',2),rep('high',2)))
Boy_Scout <- factor(c(rep(c(rep('Yes',1),rep('No',1)),3)))
deliquency_yes <- c(10,40,18,18,8,2)
deliquency_no <- c(40,160,132,132,192,48)
data_1 <- as.data.frame(cbind(social_economics,Boy_Scout,deliquency_yes,deliquency_no))
data_1
library(corrplot)
install.packages("corrplot")
library(corrplot)
corplot(data_1)
corrplot(data_1)
corrplot(data_1[1:3])
corrplot(data_1[1:3,])
corrplot(data_1[,1:3])
View(data_1)
