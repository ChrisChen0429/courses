data$sex[data$sex == 2] = 0
sex <- as.factor(data$sex)
km <- survfit(Surv(time,status)~1,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
km <- survfit(Surv(time,status)~1,data=data,type="kaplan-meier")
plot(km$time,km$surv, type="s",xlab="Time",ylab="Survival")
fit <- survfit(Surv(time,status)~1,data=data)
plot(fit,lty=1:2,col=1:2)
fit <- survfit(Surv(time,status)~sex,data=data)
plot(fit,lty=1:2,col=1:2)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+$wt.loss,data=data)
fitphm <- coxph(Surv(time,status)~sex+ph.ecog+age+ph.karno+pat.karno+meal.cal+wt.loss,data=data)
summary(fitphm)
knitr::opts_chunk$set(echo = TRUE)
data <- cbind(x1,x2)
x1 <- c(1,1,3,5,3,3)
x2 <- c(4,3,4,2,2,0)
data <- cbind(x1,x2)
data
clusters <- hclust(dist(data,method = "manhatten"))
dist
?dist
clusters <- hclust(dist(data,method = "manhattan"))
plot(clusters)
clusters <- hclust(dist(data,method = "manhattan"),method = "single")
plot(clusters)
clusters <- hclust(dist(data,method = "manhattan"),method = "single")
plot(clusters)
knitr::opts_chunk$set(echo = TRUE)
fit2 <- arima(price_ma,order=c(7,1,10))
fit2 <- arima(price_ma,order=c(7,1,10))
library('ggplot2')
library('forecast')
library('tseries')
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Time <- 1:length(BTC$Close)
ggplot()+
geom_line(aes(x=Time,y=Price))
Price <- log(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
library('forecast')
library('tseries')
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Time <- 1:length(BTC$Close)
ggplot()+
geom_line(aes(x=Time,y=Price))
library('ggplot2')
library('forecast')
library('tseries')
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Time <- 1:length(BTC$Close)
ggplot()+
geom_line(aes(x=Time,y=Price))
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
library('forecast')
library('tseries')
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Time <- 1:length(BTC$Close)
ggplot()+
geom_line(aes(x=Time,y=Price))
Price <- log(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
price_cleaned <- tsclean(Price)
ggplot()+
geom_line(aes(x=Time,y=price_cleaned))
price_ma = ts(na.omit(price_cleaned), frequency=8640)
# one month has 8640 5mins
decomp = stl(price_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
adf.test(price_ma,alternative = "stationary")
Acf(price_ma,main="ACF")
Pacf(price_ma,main="Pacf")
price_d1 <- diff(price_ma,differences = 1)
plot(price_d1)
adf.test(price_d1,alternative = "stationary")
Acf(price_d1,main="Acf for Differenced Series")
Pacf(price_d1,main="Pacf for Differencecd Series")
auto.arima(price_ma,seasonal = FALSE)
fit<-auto.arima(price_ma, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45, main='(0,1,2) Model Residuals')
fit2 <- arima(price_ma,order=c(7,1,10))
decomp = stl(price_d1, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
fit<-auto.arima(price_ma, seasonal=FALSE)
fit<-auto.arima(price_ma, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
tsdisplay(residuals(fit), lag.max=45)
fit<-auto.arima(price_ma, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
fit2 <- arima(price_ma,order=c(7,1,7))
fit2 <- arima(price_ma,order=c(7,1,7))
tsdisplay(residuals(fit), lag.max=45, main='(7,1,10) Model Residuals')
Test_price <- Price[-25920:]
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Test_price <- Price[-25920:length(Price)]  # leaf 3 month data for test
Test_price <- Price[-25920:]  # leaf 3 month data for test
a = 1:10
a[-1]
a[-2]
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Test_price <- Price[length(Price)-25920:length(Price)]  # leaf 3 month data for test
Train_price <- Price[1:length(Price)-25920]
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Test_price <- Price[(length(Price)-25920):length(Price)]  # leaf 3 month data for test
Train_price <- Price[1:(length(Price)-25920)]
Test_time <- 1:length(Test_price)
Train_time <- 1:length(Train_price)
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
Test_price <- log(Train_price)
ggplot()+
geom_line(aes(x=Train_time,y=Train_price))
Trian_price <- log(Train_price)
ggplot()+
geom_line(aes(x=Train_time,y=Train_price))
Train_price_cleaned <- tsclean(Trian_price )
ggplot()+
geom_line(aes(x=Train_time,y=Train_price_cleaned))
price_ma = ts(na.omit(Train_price_cleanedprice), frequency=8640)
price_ma = ts(na.omit(Train_price_cleaned), frequency=8640)
# one month has 8640 5mins
decomp = stl(price_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
adf.test(price_ma,alternative = "stationary")
fit<-auto.arima(price_ma, seasonal=FALSE)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
fit2 = arima(deseasonal_cnt, order=c(5,2,5))
fit2 = arima(deseasonal_cnt, order=c(5,2,5))
tsdisplay(residuals(fit), lag.max=45)
fit2
price_ma <- diff(price_ma,differences = 2)
adf.test(price_ma,alternative = "stationary")
plot(preice_ma)
plot(price_ma)
fcast <- forecast(fit2, h=30)
fcast
plot(fcast)
fcast <- forecast(fit2, h=30)
plot(fcast)
fcast <- forecast(fit, h=30)
plot(fcast)
plot(fcast,col = "red")
plot(Test_price,col="black")
fcast <- forecast(fit, h=25920)
plot(fcast,col = "red")
fcast <- forecast(fit, h=100)
plot(fcast,col = "red")
fcast <- forecast(fit, h=1000)
plot(fcast,col = "red")
fcast <- forecast(fit, h=100)
plot(fcast,col = "red")
fcast <- forecast(fit, h=1000)
plot(fcast,col = "red")
fcast$residuals
line(fcast$residuals)
plot(fcast$residuals)
plot(fcast)
fcast <- forecast(fit, h=100)
plot(fcast)
hold <- window(ts(deseasonal_cnt), start=700)
fit_no_holdout = arima(ts(deseasonal_cnt[-c(700:725)]), order=c(1,1,7))
fcast_no_holdout <- forecast(fit_no_holdout,h=25)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
BTC <- read.csv("XBT-5min.asc")
BTC <- BTC[,c("Date","Time","Close")]
Price <- BTC$Close
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
price <- log(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
Train_price_cleaned <- tsclean(Trian_price )
ggplot()+
geom_line(aes(x=Time,y=Price))
price <- log(Price)
ggplot()+
geom_line(aes(x=Train_time,y=Train_price))
Price_cleaned <- tsclean(Price )
ggplot()+
geom_line(aes(x=Time,y=Price))
ggplot()+
geom_line(aes(x=Time,y=price))
Price_cleaned <- tsclean(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
ggplot()+
geom_line(aes(x=Time,y=Price_cleaned))
Price_cleaned <- tsclean(Price)
ggplot()+
geom_line(aes(x=Time,y=Price_cleaned))
price_ma = ts(na.omit(price), frequency=8640)
# one month has 8640 5mins
decomp = stl(price_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
price_ma <- diff(price_ma,differences = 1)
adf.test(price_ma,alternative = "stationary")
adf.test(price_ma,alternative = "stationary")
plot(price_ma)
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-25920):length(Price))]), order=c(1,1,7))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-25920):length(Price))]), order=c(3,1,5))
fcast_no_holdout <- forecast(fit_no_holdout,h=100)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=100)
plot(fcast_no_holdout, main=" ")
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=100)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=1000)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=100)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
BTC <- read_excel("BTC-USD(1).xlsx")
library(readxl)
BTC <- read_excel("BTC-USD(1).xlsx")
BTC
Price <- BTC$Close
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
BTC
library(readxl)
BTC <- read_excel("BTC-USD(1).xlsx")
BTC$Date <- as.Date(BTC$Date)
BTC <- BTC[,c("Date","Close")]
BTC$Type <- "BTC"
Price <- BTC$Close
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
BTC
Price <- BTC$Close[length(BTC$Close):1]
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
price <- log(Price)
ggplot()+
geom_line(aes(x=Time,y=price))
price_ma = ts(na.omit(price), frequency=30)
# one month has 8640 5mins
decomp = stl(price_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
price_ma <- diff(price_ma,differences = 1)
adf.test(price_ma,alternative = "stationary")
plot(price_ma)
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(3,1,2))
fcast_no_holdout <- forecast(fit_no_holdout,h=100)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
BTC <- BTC[BTC$Date>="2017-01-01"]
BTC <- BTC[BTC$Date>="2017-01-01",]
BTC
BTC$Type <- "BTC"
Price <- BTC$Close[length(BTC$Close):1]
Time <- 1:length(Price)
ggplot()+
geom_line(aes(x=Time,y=Price))
price <- log(Price)
ggplot()+
geom_line(aes(x=Time,y=price))
price_ma = ts(na.omit(price), frequency=30)
# one month has 8640 5mins
decomp = stl(price_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45)
fit
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(0,1,0))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(5,1,5))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(4,1,5))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(4,1,10))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(4,1,8))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(19,1,19))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=30)
fit
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(19,1,0))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
library(readxl)
BTC <- read_excel("BTC-USD(1).xlsx")
BTC$Date <- as.Date(BTC$Date)
BTC <- BTC[,c("Date","Close")]
BTC$Type <- "BTC"
Dash <- read.csv("DASH-USD.csv",sep = ",")
Dash$Date <- as.Date(Dash$Date)
Dash <- Dash[,c("Date","Close")]
Dash$Type <- "Dash"
ETH <- read.csv("ETH-USD(1).csv",sep = ",")
ETH$Date <- as.Date(ETH$Date)
ETH <- ETH[,c("Date","Close")]
ETH$Type <- "ETH"
LTC <- read.csv("LTC-USD(1).csv",sep = ",")
LTC$Date <- as.Date(LTC$Date)
LTC <- LTC[,c("Date","Close")]
LTC$Type <- "LTC"
XRP <- read.csv("XRP-USD.csv",sep = ",")
XRP$Date <- as.Date(XRP$Date)
XRP <- XRP[,c("Date","Close")]
XRP$Type <- "XRP"
DATA <- rbind(BTC,Dash,LTC,ETH,XRP)
DATA
BTC_price <- BTC$Close[BTC$Date>="2016-01-01"]
Dash_price <- Dash$Close[Dash$Date>="2016-01-01"]
ETH_price <- ETH$Close[ETH$Date>="2016-01-01"]
LTC_price <- LTC$Close[LTC$Date>="2016-01-01"]
PCA_data <- cbind(BTC)
PCA_data
PCA_data <- rbind(BTC)
PCA_data
XRP_price <- XRP$Close[XRP$Date>="2016-01-01"]
PCA_data <- cbind(BTC_price,Dash_price,ETH_price,LTC_price,XRP_price)
PCA_data
PCA_data <- scale(PCA_data,center = TRUE,scale = TRUE)
PCA_data
PCA = prcomp(PCA_data, scale. = TRUE)
PCA
# create data frame with scores
scores = as.data.frame(PCA$x)
# plot of observations
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
geom_hline(yintercept = 0, colour = "gray65") +
geom_vline(xintercept = 0, colour = "gray65") +
geom_text(colour = "tomato", alpha = 0.8, size = 4) +
ggtitle("PCA plot of USA States - Crime Rates")
# plot of observations
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_text(alpha = 0.8, size = 4) +
# create data frame with scores
scores = as.data.frame(PCA$x)
# create data frame with scores
scores = as.data.frame(PCA$x)
# plot of observations
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_text(alpha = 0.8, size = 4) +
# create data frame with scores
scores = as.data.frame(PCA$x)
# plot of observations
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_text(alpha = 0.8, size = 4)
PCA$sdev[1]/sum(PCA$sdev)
(PCA$sdev[1]+PCA$sdev[2])/sum(PCA$sdev)
(PCA$sdev[1]+PCA$sdev[2]+PCA$sdev[2])/sum(PCA$sdev)
(PCA$sdev[1]+PCA$sdev[2]+PCA$sdev[3])/sum(PCA$sdev)
PCA$sdev[1]/sum(PCA$sdev)
(PCA$sdev[1]+PCA$sdev[2])/sum(PCA$sdev)
(PCA$sdev[1]+PCA$sdev[2]+PCA$sdev[3])/sum(PCA$sdev)
knitr::opts_chunk$set(echo = TRUE)
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(0,1,0))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
library('ggplot2')
library('forecast')
library('tseries')
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(19,1,0))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
hold <- window(ts(deseasonal_cnt))
fit_no_holdout = arima(ts(deseasonal_cnt[-c((length(Price)-90):length(Price))]), order=c(0,1,0))
fcast_no_holdout <- forecast(fit_no_holdout,h=90)
plot(fcast_no_holdout, main=" ")
lines(ts(deseasonal_cnt))
knitr::opts_chunk$set(echo = TRUE)
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
setwd("C:/Users/cheny/Desktop/study/second term/staistical machine learning/homework/homework five")
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
H
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
MultinomialEM <- function(H, K, tau) {
## Initialization
# Generate a random vector of K indices to choose from the histograms as initial centroids
init = sample(1:nrow(H), size = K, replace = F)
# Select chosen histograms as centroid, a k-by-d matrix
centroid = H[init, ]
# To avoid taking log of zero, add a small constant to the centroids where bin is empty
centroid = ifelse(centroid == 0, 0.01, centroid)
# Initialize the measure of assignment threshold to be Inf
delta = Inf
# Initialize assignment probabilities matrix, n-by-k
A = matrix(0, nrow(H), K)
# Initialize centroid parameters matrix, n-by-k
phi = matrix(0, nrow(H), K)
# Arbitrarily initialize relative cluster size c, a vector of length K
c = rep(1 / K, length.out = K)
# Initialize an intermediate matrix b to update the t matrix
b = matrix(0, K, ncol(H))
# Initialize a hard assignment vector of length n
m = rep(0, length.out = nrow(H))
# Use a while loop to implement the iteration and keep track of matrix A from previous step
while (delta >= tau) {
A_old = A
## E-step
phi = exp(H %*% t(log(centroid)))
A = t(c * t(phi)) / rowSums(t(c * t(phi)))
## M-step
c = colSums(A)
b = t(A) %*% H
centroid = b / rowSums(b)
## Measurement of iteration
delta = norm(A - A_old, type = "O")
}
## Reparameterization
m <- apply(A, 1, FUN = which.max)
return(m)
}
set.seed(345)
em_1 <- MultinomialEM(H, 3, 0.1)
em_2 <- MultinomialEM(H, 4, 0.1)
em_3 <- MultinomialEM(H, 5, 0.1)
# Reset the histograms into their original "position" in the image, then visualize the result matrix in grayscale to represent the clustering
hist_1 <- matrix(em_1, 200, 200)
hist_2 <- matrix(em_2, 200, 200)
hist_3 <- matrix(em_3, 200, 200)
image(hist_1, col = gray((3:8) / 8), axes = FALSE)
image(hist_1[, ncol(hist_1):1], col = gray((3:8) / 8), axes = FALSE)
image(hist_2[, ncol(hist_2):1], col = gray((3:8) / 8), axes = FALSE)
image(hist_3[, ncol(hist_3):1], col = gray((3:8) / 8), axes = FALSE)
knitr::opts_chunk$set(echo = TRUE)
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
dim(H)
H[init,]
