add_markers(x = ~long, y = ~lat, size = ~sharesfiledinthismkt, color = ~sharesfiledinthismkt_q, hoverinfo = "text") %>%
layout(title = 'Shared Filed in this Market for IPOs', geo = g)
p
install.packages("mitml")
install.packages('jomo',dependencies = T,type = 'source')
package_version(jomo)
library(utils)
remove.packages('jomo')
remove.packages('mitml')
update.packages(ask=FALSE,
checkBuilt=TRUE,
repos="https://cloud.r-project.org")
install.packages('mitml')
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/hw/HW6")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv(file = 'mvregex.dat',header = F)
data
data <- read.csv(file = 'mvregex.dat',header = F)
colnames(data) = c("locus", "self", "motiv", "read", "write", "science", "prog", "prog1", "prog2", "prog3")
data$prog = as.factor(data$prog)
head(data)
x <- cbind(data$locus,rep(1,n))
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 2 ## two dependent variables
x <- cbind(data$locus,rep(1,n))
x
x <- cbind(rep(1,n),data$locus)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 2 ## two dependent variables
x <- cbind(rep(1,n),data$locus)
x
y <- data[,c("read","write")]
y
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 2 ## two dependent variables
x <- cbind(rep(1,n),data$locus)
y <- data[,c("read","write")]
(b.hat = solve(t(x) %*% x) %*% t(x) %*% y)
x <- as.matrix(cbind(rep(1,n),data$locus))
x
y <- as.matrix(data[,c("read","write")])
y
(b.hat = solve(t(x) %*% x) %*% t(x) %*% y)
x
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 2 ## two dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write")])
(b.hat = solve(t(x) %*% x) %*% t(x) %*% y)
y <- as.matrix(data[,c("read","write")])
(b.hat = solve(t(x) %*% x) %*% t(x) %*% y)
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
sqrt( SS.res)
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
sqrt( SS.res)
reg = lm (cbind(read, write) ~ locus, data = data)
summary(reg)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 2 ## two dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write")])
(b.hat = solve(t(x) %*% x) %*% t(x) %*% y)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write","science")])
SS.res = t(y - Z %*% b.hat) %*% (y - Z %*% b.hat)/(n-p-1)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write","science")])
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(sqrt( SS.res))
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(sqrt( SS.res))
reg = lm (cbind(read, write,science) ~ locus, data = data)
summary(reg)
n <-  nrow(data)
p <- 1 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus))
colnames(x) <- c("intercept","slope")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(diag(sqrt( SS.res)))
n <-  nrow(data)
p <- 2 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self))
colnames(x) <- c("intercept","slope_locus","slope_self")
y <- as.matrix(data[,c("read","write","science")])
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
reg = lm (cbind(read, write,science) ~ locus + self, data = data)
summary(reg)
summary(reg,call=FALSE)
summary(reg,Call=FALSE)
summary(reg$coefficients)
summary(reg$coefficients)
reg = lm (cbind(read, write,science) ~ locus + self, data = data)
summary(reg$coefficients)
reg = lm (cbind(read, write,science) ~ locus + self, data = data)
reg$coefficients
reg$coefficients
reg$residuals
reg$df.residual
reg$model
reg$model
reg$terms
reg$effects
reg$rank
reg$coefficients
summary(reg)
reg = lm (cbind(read, write,science) ~ locus, data = data)
summary(reg)
n <-  nrow(data)
p <- 2 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(diag(sqrt( SS.res)))
n <-  nrow(data)
p <- 2 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(sqrt( SS.res))
n <-  nrow(data)
p <- 2 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
n <-  nrow(data)
p <- 2 ## only one independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self))
colnames(x) <- c("intercept","slope_locus","slope_self")
y <- as.matrix(data[,c("read","write","science")])
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
n <-  nrow(data)
p <- 2 ## two independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self))
colnames(x) <- c("intercept","slope_locus","slope_self")
y <- as.matrix(data[,c("read","write","science")])
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
reg = lm (cbind(read, write,science) ~ locus + self, data = data)
reg$coefficients
n <-  nrow(data)
p <- 3 ## three independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(sqrt( SS.res))
reg = lm (cbind(read, write,science) ~ locus + self, data = data)
reg$coefficients
reg = lm (cbind(read, write,science) ~ locus + self + motiv, data = data)
reg$coefficients
reg$residuals
cov(reg$residuals)
sd(reg$residuals)
cor(reg$residuals)
cov(reg$residuals)
t(reg$residuals) %*% reg$residuals / (n-p-1)
reg$
t(reg$residuals) %*% reg$residuals / (n-p-1)
reg = lm (cbind(read, write,science) ~ locus + self + motiv, data = data)
reg$
t(reg$residuals) %*% reg$residuals / (n-p-1)
summary(reg)
t(reg$residuals) %*% reg$residuals
t(y - x %*% b.hat) %*% (y - x %*% b.hat)
reg = lm (cbind(read, write,science) ~ locus + self + motiv, data = data)
sqrt(t(reg$residuals) %*% reg$residuals / (n-p-1))
n <-  nrow(data)
p <- 3 ## three independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)/(n-p-1)
(sqrt( SS.res))
source('~/Desktop/yi/professional_study/courses/Multivariate Analysis I/class/week7/10-Regression-Part2.R', echo=TRUE)
coef(reg)
residuals(reg)
resid(reg)
SS.res = t(y - x %*% b.hat) %*% (y - x %*% b.hat)
(sqrt( SS.res))
n <-  nrow(data)
p <- 3 ## three independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(SS.res <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
reg = lm (cbind(read, write,science) ~ locus + self + motiv, data = data)
t(residuals(reg)) %*% residuals(reg)
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
n <-  nrow(data)
p <- 3 ## only one independent variable
q <- 3 ## two dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope")
n <-  nrow(data)
p <- 3 ## only one independent variable
q <- 3 ## two dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
View(data)
n <-  nrow(data)
p <- 3 ## only one independent variable
q <- 3 ## two dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog1","prog2","prog3")])
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/class/week7")
# Example 10.4.2 on p. 357 of Rencher
# T10_1_CHEM.DAT
d <- read.table(file.choose())
# Example 10.4.2 on p. 357 of Rencher
# T10_1_CHEM.DAT
d <- read.table(T10_1_CHEM.DAT)
# Example 10.4.2 on p. 357 of Rencher
# T10_1_CHEM.DAT
d <- read.table("T10_1_CHEM.DAT")
colnames(d) = c("Number", "Unchanged", "Converted", "Unwanted", "Temperature", "Concentration", "Time")
head(d)
# z variables
Z <- cbind(rep(1, nrow(d)), as.matrix(d[, 5:7]))
head(Z)
# y variables
Y <- as.matrix(d[, 2:4])
head(Y)
# Estimates of the coefficients
(B <- solve(t(Z) %*% Z) %*% t(Z) %*% Y)
# Fitted values:
Y.hat = Z %*% B
head(Y.hat)
# Residuals:
R = Y - Y.hat
head(R)
# Residual SS matrix:
(Sigma.hat = t(R) %*%R)
# Built-in function
mlm <- lm(cbind(Unchanged, Converted, Unwanted) ~ Temperature + Concentration + Time, data = d)
summary(mlm)
coef(mlm)
# Reduced model with only intercepts
Z1 <- cbind(rep(1, nrow(d)))
(B1 <- solve(t(Z1) %*% Z1) %*% t(Z1) %*% Y)
Y1.hat = Z1 %*% B1
R1 = Y - Y1.hat
(Sigma1.hat = t(R1) %*%R1)
# sigma.hat = E and Sigma1.hat = H
eigen(solve(Sigma.hat) %*% Sigma1.hat)
q = 3
p = 3
v_h = q
ve = nrow(d) - q - 1
s = min(q,p)
m = (1/2) *(abs(p-q)-1)
N = 1/2 * (nrow(d)-q-p-2)
# T.S
(det(Sigma.hat)/det(Sigma1.hat))^(nrow(d)/2)
n = nrow(d)
r = 3
m = 3
q = 0
# Chi-sq approx
-(n-r-1-(m-r+q+1)/2)*log(det(Sigma.hat)/det(Sigma1.hat))
# p-value
1-pchisq(-(n-r-1-(m-r+q+1)/2)*log(det(Sigma.hat)/det(Sigma1.hat)), m*(r-q))
# Testing individual predictors:
anova(mlm)
summary(manova(mlm))
summary(manova(mlm), test="Wilks")
View(d)
#install.packages("car")
library(car)
Manova(mlm)
reg <- lm(cbind(read, write, science) ~ self, data = data)
reg
summary(manova(reg), test="Wilks") ## sequential F test
reg <- lm(cbind(read, write, science) ~ self, data = data)
summary(manova(reg), test="Wilks") ## sequential F test
Manova(reg)
reg <- lm(cbind(read, write, science) ~ self, data = data)
summary(manova(reg), test="Wilks")
n <-  nrow(data)
p <- 3
q <- 1
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
n <-  nrow(data)
p <- 3
q <- 1
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
x
y
n <-  nrow(data)
p <- 3
q <- 1
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(b.hat <- solve(t(x) %*% x) %*% t(x) %*% y)
reg <- lm(prog ~ locus + self + motiv)
reg <- lm(prog ~ locus + self + motiv,data)
reg
reg <- lm(prog ~ locus + self + motiv,data)
reg <- lm(prog ~ locus + self + motiv,data)
summary(reg)
reg <- lm(prog ~ locus + self + motiv,data)
summary(reg)
reg <- lm(prog ~ locus + self + motiv,data)
summary(reg)
reg$coefficients
reg$residuals
reg$df.residual
reg$model
n <-  nrow(data)
p <- 3 ## three independent variable
q <- 3 ## three dependent variables
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("read","write","science")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(SS.res <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))/(n-p-1)
reg = lm (cbind(read, write,science) ~ locus + self + motiv, data = data)
t(residuals(reg)) %*% residuals(reg)/(n-p-1)
### compared model
x1 <- rep(1,n)
colnames(x) <- c("intercept")
colnames(x1) <- c("intercept")
### compared model
x1 <- rep(1,n)
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(H <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
n <-  nrow(data)
p <- 3
q <- 1
## using likelihood ratio test
### proposed model
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(H <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
n <-  nrow(data)
p <- 3
q <- 1
## using likelihood ratio test
### proposed model
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.numeric(data[,c("prog")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
y <- as.numeric(data[,c("prog")])
b.hat1 <- solve(t(x1) %*% x1) %*% t(x1) %*% y
(H <- t(y - x1 %*% b.hat1) %*% (y - x1 %*% b.hat1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
p1 <- 0
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
# p-value
1-pchisq(-(n-p-1-(q-p+p1+1)/2)*log(det(Sigma.hat)/det(Sigma1.hat)), q*(p-p1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
# p-value
1-pchisq(-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H)), q*(p-p1))
n <-  nrow(data)
p <- 3
q <- 3
p1 <- 0
## using likelihood ratio test
### proposed model
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog1","prog2","prog3")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
y <- as.numeric(data[,c("prog")])
b.hat1 <- solve(t(x1) %*% x1) %*% t(x1) %*% y
(H <- t(y - x1 %*% b.hat1) %*% (y - x1 %*% b.hat1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
# p-value
1-pchisq(-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H)), q*(p-p1))
n <-  nrow(data)
p <- 3
q <- 3
p1 <- 0
## using likelihood ratio test
### proposed model
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog1","prog2","prog3")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
b.hat1 <- solve(t(x1) %*% x1) %*% t(x1) %*% y
(H <- t(y - x1 %*% b.hat1) %*% (y - x1 %*% b.hat1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
# p-value
1-pchisq(-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H)), q*(p-p1))
det(E)
log(det(E)/det(H))
det(H)
det(E)
## using likelihood ratio test
### proposed model
x <- as.matrix(cbind(rep(1,n),data$locus,data$self,data$motiv))
colnames(x) <- c("intercept","slope_locus","slope_self","slope_motiv")
y <- as.matrix(data[,c("prog1","prog2","prog3")])
b.hat <- solve(t(x) %*% x) %*% t(x) %*% y
(E <- t(y - x %*% b.hat) %*% (y - x %*% b.hat))
### compared model
x1 <- rep(1,n)
b.hat1 <- solve(t(x1) %*% x1) %*% t(x1) %*% y
(H <- t(y - x1 %*% b.hat1) %*% (y - x1 %*% b.hat1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
# p-value
1-pchisq(-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H)), q*(p-p1))
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log(det(E)/det(H))
-(n-r-1-(q-p+p1+1)/2)
E
H
det(H)
det(E)
det(H)*10^9
# Chi-sq approx
-(n-r-1-(q-p+p1+1)/2)*log((det(E)*10^10)/(det(H)*10^9))
(det(E)*10^10)/(det(H)*10^9)
log(-0.62)
E
H
y
x
x1
H
E
det(E)
det(H)
