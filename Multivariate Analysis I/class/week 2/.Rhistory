vec1 <- c(1,2,3,4,5,6)
vec1
# Equivalently:
vec1 = 1:6
vec1
A <- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = TRUE)
A
A[2,3]
A[2,]  # Second row
A[,3]  # Third column
# The transpose is taken by using the t function.
t(A)
B <- matrix(c(6, 7, 8, 9, 10, 11), nrow = 2, ncol = 3, byrow = TRUE)
B
A + B
5*B
C <- matrix(10:21, nrow = 3, ncol = 4, byrow = TRUE)
C
A %*% C
A
C
# It can be obtained as a byprosuct of the QR decomposition function:
qr(A)$rank
# Example from class:
x1 = c(1, 1, 1)
x2 = c(2, 5, -1)
x3 = c(0, 1, -1)
2*x1 - x2 + 3*x3
A <- matrix( c(1,2,3,2,2,1,3,1,4), nrow = 3, ncol = 3, byrow = TRUE)
A
det(A)
# 4. Diagonal and identity matrices
I2 <- diag(2)
I2
I3 <- diag(3)
I3
A
# Note multiplication with identity does not change the matrix
I3 %*% A
D6 <- diag(c(1,2,3,9,8,7))
D6
# 5. Matrix inverse
# The solve function is used to take the inverse in R.
Ainv <- solve(A)
Ainv
round(A%*%Ainv, 2)
A = matrix(c(12, 10, 6, -2), 2, 2)
C = c(48, 12)
solve(A, C)
A
C
A%*%solve(A, C)
sum(diag(A))
# Eigenvalues and Eigenvectors
A <- matrix(c(3,2,1,2,3,2,1,2,3), nrow = 3, ncol = 3, byrow = TRUE)
A
evd <- eigen(A)
evd
evd$values
evd$vectors
# Verify:
lambda1 <- evd$values[1]
v1 <- evd$vectors[,1]
A %*% v1
lambda1 * v1
A
A%*%evd$vectors
evd$values%*%evd$vectors
t(evd$values)%*%evd$vectors
M <- matrix(c(1,2,3,2,5,7,3,7,1), nrow = 3, ncol = 3, byrow = TRUE)
M
evM <- eigen(M)
M
evM <- eigen(M)
C <-	evM$vectors
D <- diag(evM$values)
D
# Check:
C %*% D %*% t(C)
C
A = matrix(c(2, -1, 0, -1, 2, -1, 0, -1, 2), 3, 3)
A
# The easiest way to check is to see if all eigenvalues are positive:
eigen(A)
D.root = diag(sqrt(eigen(A)$values))
A.root = eigen(A)$vectors %*% D.root %*% t(eigen(A)$vectors)
# Check:
round(A.root %*% A.root, 2) == A
# Exercise 3.20 on p. 148
# Reading the data from table T3.2
# File T3-2.dat
# x1 = duration of snoq storm
# x2 = number of hours spent cleaning the snow
d = read.table(file.choose())
colnames(d) = c("x1", "x2")
d
colnames(d) = c("x1", "x2")
d
attach(d)
# Defining the matrix X
X = as.matrix(d)
x
X
# Scatterplot
plot(x1, x2)
X
# Exercise 3.20 on p. 148
# Reading the data from table T3.2
# File T3-2.dat
# x1 = duration of snoq storm
# x2 = number of hours spent cleaning the snow
d = read.table(file.choose())
colnames(d) = c("x1", "x2")
d
attach(d)
# Defining the matrix X
X = as.matrix(d)
X
# Scatterplot
plot(x1, x2)
# Computing the means
x.bar <- c(mean(X[,1]), mean(X[,2]))
# Computing the means
x.bar <- c(mean(X[,1]), mean(X[,2]))
# or
colMeans(X)
abline (h = x.bar[2], lty = 2)
abline (v = x.bar[1], lty = 2)
# Covariance matrix
S <- cov(X)
S
# Correlation matrix
R = cor(X)
R
# Checking formula from lectures:
n = nrow(X)
j = rep(1, n)
# The mean vector formula:
t(X)%*%j/n
# Covariance matrix formula:
J = j %*% t(j)
j
J
I = diag(n)
I
(1/(n-1)) *t(X) %*% (I - J/n) %*% X
# Generalized var:
det(S)
# Total var:
sum(diag(S))
# Method 1: Direct computation:
mean(x2 - x1)
var(x2 - x1)
C = c(-1, 1)
t(C) %*% x.bar
t(C) %*% S %*% C
