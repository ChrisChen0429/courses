axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
else if (i <= 0.4){
Q <- c(Q,2)
}
else if (i <= 0.6){
Q <- c(Q,3)
}
else if (i <= 0.8){
Q <- c(Q,4)
}
else{
Q <- c(Q,5)
}
}
table(Q)
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
else if (i <= 0.4){
Q <- c(Q,2)
}
else if (i <= 0.6){
Q <- c(Q,3)
}
else if (i <= 0.8){
Q <- c(Q,4)
}
else{
Q <- c(Q,5)
}
}
table(Q)
round(table(Q) / 40,2)
0.08+0.25+0.4+0.18+0.1
round(table(Q) / 40,3)
sum(round(table(Q) / 40,3))
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<40) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
seq(0, 1, 5)
seq(1930, 1940, 1)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
#geom_histogram(bins = 10) +
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
setwd("~/Desktop/courses/Adv Tpcs Rsrch Mthds & Dsgn/final")
library(dplyr)
library(multiplex)
load("ecpp_pu_pert.rdata")
# transforme the context data
context <- ecpp_pu_pert %>% select(cwhite,
hdintdis,hdspeechx,hddistrbx,hddeafimx,hdblindx,hdorthox,hdautismx,hdpddx,hdaddx,hdlearnx,hddelayx,hdtrbrain,hdotherx,
hhtotalxx,
useintrnt,
ttlhhinc)
context[context==-1] = NA
context$DISB <- as.numeric(context$hdintdis == 2 &
context$hdspeechx == 2 &
context$hddistrbx == 2 &
context$hddeafimx == 2 &
context$hdblindx == 2 &
context$hdorthox == 2 &
context$hdautismx == 2 &
context$hdpddx == 2 &
context$hdaddx == 2 &
context$hdlearnx == 2 &
context$hddelayx== 2 &
context$hdtrbrain == 2 &
context$hdotherx == 2)
context$hhtotalxx[context$hhtotalxx<=4] = 0
context$hhtotalxx[context$hhtotalxx>4] = 1
context$useintrnt[context$useintrnt==1] =0
context$useintrnt[context$useintrnt>1] =1
context$ttlhhinc[context$ttlhhinc<=5] =0
context$ttlhhinc[context$ttlhhinc>5] = 1
context <- context %>% select(DISB,hhtotalxx,useintrnt,ttlhhinc)
# transforme the indicator
indicator <- ecpp_pu_pert %>% select(dcloa,dcost,drely,dlern,dchil,dhrop,dnbgrp,drtweb,drecfam,drelor)
indicator[indicator==-1] = NA
indicator[indicator<=2] = 0
indicator[indicator>2] = 1
# transform the outcome varaible
outcome <- ecpp_pu_pert %>% select(dpcolor, dpletter, dpcount, dpname)
outcome[outcome==-1] = NA
outcome$dpcolor[outcome$dpcolor<=2] = 0
outcome$dpcolor[outcome$dpcolor>2] = 1
outcome$dpletter[outcome$dpletter<=2] = 0
outcome$dpletter[outcome$dpletter>2] = 1
outcome$dpcount[outcome$dpcount<=3] = 0
outcome$dpcount[outcome$dpcount>3] = 1
outcome$dpname[outcome$dpcount==1] = 0
outcome$dpcount[outcome$dpcount==2] = 1
data[is.na(data)] = 999
data <- cbind(indicator,context,outcome)
write.dat(data,'data.dat')
is.na(data)
data[is.na(data)]
library(dplyr)
library(multiplex)
load("ecpp_pu_pert.rdata")
# transforme the context data
context <- ecpp_pu_pert %>% select(cwhite,
hdintdis,hdspeechx,hddistrbx,hddeafimx,hdblindx,hdorthox,hdautismx,hdpddx,hdaddx,hdlearnx,hddelayx,hdtrbrain,hdotherx,
hhtotalxx,
useintrnt,
ttlhhinc)
context[context==-1] = NA
context$DISB <- as.numeric(context$hdintdis == 2 &
context$hdspeechx == 2 &
context$hddistrbx == 2 &
context$hddeafimx == 2 &
context$hdblindx == 2 &
context$hdorthox == 2 &
context$hdautismx == 2 &
context$hdpddx == 2 &
context$hdaddx == 2 &
context$hdlearnx == 2 &
context$hddelayx== 2 &
context$hdtrbrain == 2 &
context$hdotherx == 2)
context$hhtotalxx[context$hhtotalxx<=4] = 0
context$hhtotalxx[context$hhtotalxx>4] = 1
context$useintrnt[context$useintrnt==1] =0
context$useintrnt[context$useintrnt>1] =1
context$ttlhhinc[context$ttlhhinc<=5] =0
context$ttlhhinc[context$ttlhhinc>5] = 1
context <- context %>% select(DISB,hhtotalxx,useintrnt,ttlhhinc)
# transforme the indicator
indicator <- ecpp_pu_pert %>% select(dcloa,dcost,drely,dlern,dchil,dhrop,dnbgrp,drtweb,drecfam,drelor)
indicator[indicator==-1] = NA
indicator[indicator<=2] = 0
indicator[indicator>2] = 1
# transform the outcome varaible
outcome <- ecpp_pu_pert %>% select(dpcolor, dpletter, dpcount, dpname)
outcome[outcome==-1] = NA
outcome$dpcolor[outcome$dpcolor<=2] = 0
outcome$dpcolor[outcome$dpcolor>2] = 1
outcome$dpletter[outcome$dpletter<=2] = 0
outcome$dpletter[outcome$dpletter>2] = 1
outcome$dpcount[outcome$dpcount<=3] = 0
outcome$dpcount[outcome$dpcount>3] = 1
outcome$dpname[outcome$dpcount==1] = 0
outcome$dpcount[outcome$dpcount==2] = 1
data <- cbind(indicator,context,outcome)
data[is.na(data)] <- 999
write.dat(data,'data.dat')
colnames(data)
print(colnames(data))
View(data)
library(dplyr)
library(multiplex)
load("ecpp_pu_pert.rdata")
# transforme the context data
context <- ecpp_pu_pert %>% select(cwhite,
hdintdis,hdspeechx,hddistrbx,hddeafimx,hdblindx,hdorthox,hdautismx,hdpddx,hdaddx,hdlearnx,hddelayx,hdtrbrain,hdotherx,
hhtotalxx,
useintrnt,
ttlhhinc)
context[context==-1] = NA
context$DISB <- as.numeric(context$hdintdis == 2 &
context$hdspeechx == 2 &
context$hddistrbx == 2 &
context$hddeafimx == 2 &
context$hdblindx == 2 &
context$hdorthox == 2 &
context$hdautismx == 2 &
context$hdpddx == 2 &
context$hdaddx == 2 &
context$hdlearnx == 2 &
context$hddelayx== 2 &
context$hdtrbrain == 2 &
context$hdotherx == 2)
context$hhtotalxx[context$hhtotalxx<=4] = 0
context$hhtotalxx[context$hhtotalxx>4] = 1
context$useintrnt[context$useintrnt==1] =0
context$useintrnt[context$useintrnt>1] =1
context$ttlhhinc[context$ttlhhinc<=5] =0
context$ttlhhinc[context$ttlhhinc>5] = 1
context <- context %>% select(DISB,hhtotalxx,useintrnt,ttlhhinc)
# transforme the indicator
indicator <- ecpp_pu_pert %>% select(dcloa,dcost,drely,dlern,dchil,dhrop,dnbgrp,drtweb,drecfam,drelor)
indicator[indicator==-1] = NA
indicator[indicator<=2] = 0
indicator[indicator>2] = 1
# transform the outcome varaible
outcome <- ecpp_pu_pert %>% select(dpcolor, dpletter, dpcount, dpname)
outcome[outcome==-1] = NA
outcome$dpcolor[outcome$dpcolor<=2] = 0
outcome$dpcolor[outcome$dpcolor>2] = 1
outcome$dpletter[outcome$dpletter<=2] = 0
outcome$dpletter[outcome$dpletter>2] = 1
outcome$dpcount[outcome$dpcount<=3] = 0
outcome$dpcount[outcome$dpcount>3] = 1
outcome$dpname[outcome$dpname==1] = 0
outcome$dpname[outcome$dpname==2] = 1
data <- cbind(indicator,context,outcome)
data[is.na(data)] <- 999
write.dat(data,'data.dat')
colnames(indicator)
colnames(context)
# Alternative plots:
install.packages("ape")
setwd("~/Desktop/courses/Multivariate Analysis I/class/week14")
# Example (Public Utility Data). Read file T12-5.DAT
d = read.table("T12-5.DAT", header = F)
colnames(d) = c("CovRatio", "ROC", "CostPerKW", "Load", "DemandGrowth", "Sales", "Percent", "TotalCost","Company")
head(d)
# Eucledian distances
# Often it is advisable to standardize the variables so they all have unit variance
round(dist(scale(d[,1:8])), 2)
# Exercise:
# Use the women track record data:
# Read the data from TrackWomen.dat
data <- read.table("TrackWomen.dat", sep="\t",header = T)
data
# DO NOT STANDARDIZE
# a) Obtain the distance matrix using Eucledian distance
round(dist(d[,2:8]), 2)
# DO NOT STANDARDIZE
# a) Obtain the distance matrix using Eucledian distance
a <- round(dist(d[,2:8]), 2)
a
max(a)
which(a==max(a))
data$
das
data$Country
data$Country[5]
data$Country[1]
data$Country[11]
which(a==min(a))
min(1)
min(a)
min(a)
# DO NOT STANDARDIZE
# a) Obtain the distance matrix using Eucledian distance
a <- round(dist(d[,2:8]), 2)
min(a)
a
data$Country[10]
data$Country[4]
# b) Obtain the distance matrix using Manhattan distance
a <- round(dist(d[,2:8], method = "manhattan"), 2)
min(a)
a
# Example (Public Utility Data). Read file T12-5.DAT
d = read.table("T12-5.DAT", header = F)
colnames(d) = c("CovRatio", "ROC", "CostPerKW", "Load", "DemandGrowth", "Sales", "Percent", "TotalCost","Company")
head(d)
# Eucledian distances
# Often it is advisable to standardize the variables so they all have unit variance
round(dist(scale(d[,1:8])), 2)
# Other distances:
round(dist(scale(d[,1:8]), method = "manhattan"), 2)
# Average linkage clustering
av.clust = hclust(dist(scale(d[,1:8])), method = "average")
plot(av.clust, labels = d$Company)
# From now on USE EUCLIDEAN DISTANCE
# c) Perform single-linkage clustering and dendrogram
av.clust = hclust(dist(scale(d[,1:8])), method = "single")
plot(av.clust, labels = d$Company)
# From now on USE EUCLIDEAN DISTANCE
# c) Perform single-linkage clustering and dendrogram
av.clust = hclust(dist(d[,2:8], method = "single"))
?hclust
# From now on USE EUCLIDEAN DISTANCE
# c) Perform single-linkage clustering and dendrogram
av.clust = hclust(dist(d[,2:8]), method = "single")
plot(av.clust, labels = d$Company)
# Exercise:
# Use the women track record data:
# Read the data from TrackWomen.dat
data <- read.table("TrackWomen.dat", sep="\t",header = T)
# DO NOT STANDARDIZE
# a) Obtain the distance matrix using Eucledian distance
a <- round(dist(data[,2:8]), 2)
min(a)
a
# DO NOT STANDARDIZE
# a) Obtain the distance matrix using Eucledian distance
a <- round(dist(data[,2:8]), 2)
min(a)
a
a <- as.matrix(a)
View(a)
which(a=0.24)
which(a==0.24)
1441/54
a[27,37]
data$Country[27]
data$Country[37]
# b) Obtain the distance matrix using Manhattan distance
a <- round(dist(data[,2:8], method = "manhattan"), 2)
min(a)
a <- as.matrix(a)
min(a)
# b) Obtain the distance matrix using Manhattan distance
a <- round(dist(data[,2:8], method = "manhattan"), 2)
min(a)
which(a==0.48)
1063/52
a <- as.matrix(a)
View(a)
a <- round(dist(data[,2:8], method = "manhattan"), 2)
min(a)
which(a==0.48)
# From now on USE EUCLIDEAN DISTANCE
# c) Perform single-linkage clustering and dendrogram
av.clust = hclust(dist(data[,2:8]), method = "single")
plot(av.clust, labels = d$Company)
# From now on USE EUCLIDEAN DISTANCE
# c) Perform single-linkage clustering and dendrogram
av.clust = hclust(dist(data[,2:8]), method = "single")
plot(av.clust, labels = data$Country)
# d) Perform complete-linkage clustering and dendrogram
av.clust = hclust(dist(data[,2:8]), method = "complex")
?hclust
# d) Perform complete-linkage clustering and dendrogram
av.clust = hclust(dist(data[,2:8]), method = "complete")
plot(av.clust, labels = data$Country)
# e) Perform average-linkage clustering and dendrogram
av.clust = hclust(dist(data[,2:8]), method = "average")
plot(av.clust, labels = data$Country)
# b) Obtain the distance matrix using Manhattan distance
a <- round(dist(data[,2:8], method = "manhattan"), 2)
which(a==0.48)
s
a
a <- as.matrix(a)
View(a)
min(a)
a <- as.matrix(a)
# b) Obtain the distance matrix using Manhattan distance
a <- round(dist(data[,2:8], method = "manhattan"), 2)
min(a)
a <- as.matrix(a)
View(a)
print(i)
for (i in 1:54){
for (j in a[i,]){
if (j == 0.48){
print(i)
}
}
}
a[27,]
data$Country[27]
# Exercise:
# Use the bulti-in dataset iris
# a) Use the lda function to separate the Species using all other variables
ldamod <- lda(Species ~ ., data= iris)
# Exercise:
# Use the bulti-in dataset iris
# a) Use the lda function to separate the Species using all other variables
library(MASS)
ldamod <- lda(Species ~ ., data= iris)
ldamod
# b) Obtain the prediction vs. actual matrix
table(Predicted=predict(ldamod)$class, Actual = iris$Species)
# Accuracy:
mean(predict(ldamod)$class == iris$Species)
# c) Predict the species of a new observation with the following characteristics:
# Sepal.Length = 7.7, Sepal.Width = 3.2, Petal.Length = 5.1, Petal.Width = 2.4
xnew = data.frame(Sepal.Length = 7.7, Sepal.Width = 3.2, Petal.Length = 5.1, Petal.Width = 2.4)
# c) Predict the species of a new observation with the following characteristics:
# Sepal.Length = 7.7, Sepal.Width = 3.2, Petal.Length = 5.1, Petal.Width = 2.4
xnew = data.frame(Sepal.Length = 7.7, Sepal.Width = 3.2, Petal.Length = 5.1, Petal.Width = 2.4)
predict(ldamod, xnew)
# d) Repeat with qda
qdamod = qda(Species ~ ., data= iris)
qdamod
table(Predicted=predict(qdamod)$class, Actual = iris$Species)
# Accuracy:
mean(predict(qdamod)$class == iris$Species)
predict(qdamod, xnew)
