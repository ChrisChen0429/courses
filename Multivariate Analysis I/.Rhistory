axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(102)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(103)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
normal_sample
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
table(Q) / sum(Q)
table(Q) / sum(Q) * 100
library(sirt)
data(data.read,package="sirt")
View(data.read)
mod <- rasch.mml2(dat)
dat <- data.read
mod <- rasch.mml2(dat)
View(mod)
summary(mod)
pv1 <- TAM::IRT.drawPV(mod, NPV=10)
pv1
View(pv1)
setwd("~/Desktop/courses/Multivariate Analysis I")
knitr::opts_chunk$set(echo = TRUE)
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",sep=",")
View(wine)
## load the data
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",sep=",")
head(wine,5)
View(wine)
## load the data
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",sep=",")
colnames(wine) <- c("type",	"Alcohol","Malic acid","Ash","Alcalinity","Magnesium","Phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","OD280/OD315","Proline"
head(wine,5)
## load the data
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",sep=",")
colnames(wine) <- c("type",	"Alcohol","Malic acid","Ash","Alcalinity","Magnesium","Phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","OD280 or OD315","Proline"
head(wine,5)
colnames(wine) <- c("type",	"Alcohol","Malic acid","Ash","Alcalinity","Magnesium","Phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","OD280 or OD315","Proline")
head(wine,5)
colnames(wine) <- c("type",	"Alcohol","Malic acid","Ash","Alcalinity","Magnesium","Phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","OD280/OD315","Proline")
head(wine,5)
dim(data)
## load the data
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",sep=",")
colnames(wine) <- c("type",	"Alcohol","Malic acid","Ash","Alcalinity","Magnesium","Phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","OD280/OD315","Proline")
head(wine,5)
dim(wine)
library(car)
summary(wine)
library(car)
scatterplotMatrix(wine[2:14])
library(car)
scatterplotMatrix(wine[2:6])
plot(wine$Ash, wine$Alcalinity)
text(wine$Ash, wine$Alcalinity, wine$type, cex=0.7, pos=4, col="red")
plot(wine$Alcohol, wine$Alcalinity)
text(wine$Alcohol, wine$Alcalinity, wine$type, cex=0.7, pos=4, col="red")
plot(wine$Alcohol, wine$`Malic acid`)
text(wine$Alcohol, wine$`Malic acid`, wine$type, cex=0.7, pos=4, col="red")
sapply(wine[2:14], mean)
sapply(wine[2:14], mean)
sapply(wine[2:14], sd)
round(sapply(wine[2:14], mean),2)
round(sapply(wine[2:14], sd),2)
round(sapply(wine[which(wine$type==1),2:14], mean),2)
round(sapply(wine[which(wine$type==2),2:14], mean),2)
printMeanAndSdByGroup <- function(variables,groupvariable)
{
# find the names of the variables
variablenames <- c(names(groupvariable),names(as.data.frame(variables)))
# within each group, find the mean of each variable
groupvariable <- groupvariable[,1] # ensures groupvariable is not a list
means <- aggregate(as.matrix(variables) ~ groupvariable, FUN = mean)
names(means) <- variablenames
print(paste("Means:"))
print(means)
# within each group, find the standard deviation of each variable:
sds <- aggregate(as.matrix(variables) ~ groupvariable, FUN = sd)
names(sds) <- variablenames
print(paste("Standard deviations:"))
print(sds)
# within each group, find the number of samples:
samplesizes <- aggregate(as.matrix(variables) ~ groupvariable, FUN = length)
names(samplesizes) <- variablenames
print(paste("Sample sizes:"))
print(samplesizes)
}
printMeanAndSdByGroup(wine[2:14],wine$type)
printMeanAndSdByGroup <- function(variables,groupvariable)
{
# find the names of the variables
variablenames <- c(names(groupvariable),names(as.data.frame(variables)))
# within each group, find the mean of each variable
groupvariable <- groupvariable[,1] # ensures groupvariable is not a list
means <- aggregate(as.matrix(variables) ~ groupvariable, FUN = mean)
names(means) <- variablenames
print(paste("Means:"))
print(means)
# within each group, find the standard deviation of each variable:
sds <- aggregate(as.matrix(variables) ~ groupvariable, FUN = sd)
names(sds) <- variablenames
print(paste("Standard deviations:"))
print(sds)
# within each group, find the number of samples:
samplesizes <- aggregate(as.matrix(variables) ~ groupvariable, FUN = length)
names(samplesizes) <- variablenames
print(paste("Sample sizes:"))
print(samplesizes)
}
printMeanAndSdByGroup(wine[2:14],wine[1])
printMeanAndSdByGroup <- function(variables,groupvariable)
{
# find the names of the variables
variablenames <- c(names(groupvariable),names(as.data.frame(variables)))
# within each group, find the mean of each variable
groupvariable <- groupvariable[,1] # ensures groupvariable is not a list
means <- aggregate(as.matrix(variables) ~ groupvariable, FUN = mean)
names(means) <- variablenames
print(paste("Means:"))
print(means)
# within each group, find the standard deviation of each variable:
sds <- aggregate(as.matrix(variables) ~ groupvariable, FUN = sd)
names(sds) <- variablenames
print(paste("Standard deviations:"))
print(sds)
}
printMeanAndSdByGroup(wine[2:14],wine[1])
calcWithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the standard deviation for group i:
sdi <- sd(levelidata)
numi <- (levelilength - 1)*(sdi * sdi)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the within-groups variance
Vw <- numtotal / (denomtotal - numlevels)
return(Vw)
}
WithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the standard deviation for group i:
sdi <- sd(levelidata)
numi <- (levelilength - 1)*(sdi * sdi)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the within-groups variance
Vw <- numtotal / (denomtotal - numlevels)
return(Vw)
}
WithinGroupsVariance(wine[2],wine[1])
WithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
n_total <- length(variable)
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
n_group <- length(levels)
total_variane <- 0
for (g in 1:n_group){
group_data <- variable[groupvariable==g,]
n_group <- length(group_data)
group_mean <- mean(group_data)
for (i in group_data){
total_variane <- total_variane + (i - group_mean)^2
}
}
return(total_variance/(n_total-n_group))
}
WithinGroupsVariance(wine[2],wine[1])
WithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
n_total <- length(variable)
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
n_group <- length(levels)
total_variane <- 0
for (g in 1:n_group){
group_data <- variable[groupvariable==g,]
n_group <- length(group_data)
group_mean <- mean(group_data)
for (i in group_data){
total_variane <- total_variane + (i - group_mean)^2
}
}
return(total_variane/(n_total-n_group))
}
WithinGroupsVariance(wine[2],wine[1])
WithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
n_total <- length(variable)
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
n_group <- length(levels)
total_variance <- 0
for (g in 1:n_group){
group_data <- variable[groupvariable==g,]
group_mean <- mean(group_data)
for (i in group_data){
total_variance <- total_variance + (i - group_mean)^2
}
}
return(total_variance/(n_total-n_group))
}
WithinGroupsVariance(wine[2],wine[1])
variable <- wine[2]
groupvariable <- wine[1]
n_total <- length(variable)
variable
# find out how many values the group variable can take
n_total <- length(as.vector(variable))
n_total
n_total
as.vector(variable)
length(as.vector(variable))
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
variable <- wine$Alcohol
groupvariable <- wine$type
n_total <- length(variable)
n_group <- length(unique(groupvariable))
WithinGroupsVariance <- function(variable,groupvariable){
n_total <- length(variable)
n_group <- length(unique(groupvariable))
total_variance <- 0
for (g in 1:n_group){
group_data <- variable[groupvariable==g]
group_mean <- mean(group_data)
for (i in group_data){
total_variance <- total_variance + (i - group_mean)^2
}
}
return(total_variance/(n_total-n_group))
}
WithinGroupsVariance(wine$Alcohol,wine$type)
BetweenGroupsVariance <- function(variable,groupvariable){
n_group <- length(unique(groupvariable))
grand_mean <- mean(variable)
total_variance <- 0
for (g in 1:n_group){
group_data <- variable[groupvariable==g]
group_mean <- mean(group_data)
ng <- length(group_data)
total_variance <- total_variance + ng*(group_mean - grand_mean)^2
}
return(total_variance/(n_group-1))
}
BetweenGroupsVariance(wine$Alcohol,wine$type)
35.39742/0.2620525
for (v in 2:14){
between <- BetweenGroupsVariance(wine[,i],wine$type)
within <- WithinGroupsVariance(wine[,i],wine$type)
variablename <- colnames(wine)[i]
sep <- between / within
print(paste("variable",variablename,"Wv=",Vw,"Bv=",Vb,"Sep=",sep))
}
for (i in 2:14){
between <- BetweenGroupsVariance(wine[,i],wine$type)
within <- WithinGroupsVariance(wine[,i],wine$type)
variablename <- colnames(wine)[i]
sep <- between / within
print(paste("variable",variablename,"Wv=",Vw,"Bv=",Vb,"Sep=",sep))
}
for (i in 2:14){
between <- BetweenGroupsVariance(wine[,i],wine$type)
within <- WithinGroupsVariance(wine[,i],wine$type)
variablename <- colnames(wine)[i]
sep <- between / within
print(paste("variable",variablename,"Wv=",within,"Bv=",between,"Sep=",sep))
}
for (i in 2:14){
between <- BetweenGroupsVariance(wine[,i],wine$type)
within <- WithinGroupsVariance(wine[,i],wine$type)
variablename <- colnames(wine)[i]
sep <- between / within
print(paste("variable",variablename,", Wv=",within,", Bv=",between,", Sep=",sep))
}
for (i in 2:14){
between <- BetweenGroupsVariance(wine[,i],wine$type)
within <- WithinGroupsVariance(wine[,i],wine$type)
variablename <- colnames(wine)[i]
sep <- between / within
print(paste("variable",variablename,",Wv=",within,",Bv=",between,",Sep=",sep))
}
cor(wine[,2:14])
round(cor(wine[,2:14]),2)
scale_imput <-scale(wine[,2:14])
scale_imput
scale_imput <-scale(wine[,2:14])
wine.pca <- prcomp(scale_imput)
wine.pca
scale_imput <-scale(wine[,2:14])
wine.pca <- prcomp(scale_imput)
round(wine.pca,2)
scale_imput <-scale(wine[,2:14])
wine.pca <- prcomp(scale_imput)
wine.pca
scale_imput <-scale(wine[,2:14])
wine.pca <- prcomp(scale_imput)
summary(wine.pca)
scale_imput <-scale(wine[,2:14])
wine.pca <- prcomp(scale_imput)
summary(wine.pca)
screeplot(wine.pca, type="lines")
(wine.pca$sdev)^2[1:4]
(wine.pca$sdev)^2
cumsum((wine.pca$sdev)^2)/sum((wine.pca$sdev)^2)
(wine.pca$sdev)^2
wine.pca$rotation[,1]
round(wine.pca$rotation[,1],2)
plot(wine.pca$x[,1],wine.pca$x[,2]) # make a scatterplot
text(wine.pca$x[,1],wine.pca$x[,2], wine$V1, cex=0.7, pos=4, col="red")
plot(wine.pca$x[,1],wine.pca$x[,2]) # make a scatterplot
text(wine.pca$x[,1],wine.pca$x[,2], wine$V1, cex=0.7, pos=4, col="red")
plot(wine.pca$x[,1],wine.pca$x[,2]) # make a scatterplot
text(wine.pca$x[,1],wine.pca$x[,2], wine$type, cex=0.7, pos=4, col="red")
library(MASS)
wine.lda <- lda(wine$type ~ wine.pca$x[,1] + wine.pca$x[,2] + wine.pca$x[,3] + wine.pca$x[,4])
?lda
wine.lda <- qda(x = wine.pca$x[,1:4],  wine$type!~.)
wine.lda <- qda(x = wine.pca$x[,1:4],  wine$type ~.)
wine.lda <- qda(x = wine.pca$x[,1:4], grouping = wine$type)
wine.qda
library(MASS)
wine.qda <- qda(x = wine.pca$x[,1:4], grouping = wine$type)
wine.qda
plot(wine.qda)
library(MASS)
wine.qda <- qda(x = wine.pca$x[,1:4], grouping = wine$type)
plot(wine.qda)
library(MASS)
wine.lda <- lda(x = wine.pca$x[,1:4], grouping = wine$type)
plot(wine.lda)
wine.lda
wine.lda$scaling
predict(wine.lda)
table(Predicted=predict(ldamod)$class, Actual=wine$type)
table(Predicted=predict(wine.lda)$class, Actual=wine$type)
table(Predicted=predict(wine.lda)$class, Actual=wine$type)
1-2/178
wine.pred <- predict(wine.lda, wine.pca$x[,1:4])
ldahist(data = wine.pred$x[1,], g=wine$V1)
ldahist(data = wine.pred$x[1,], g=wine$type)
wine.pred <- predict(wine.lda, wine.pca$x[,1:4])
ldahist(data = wine.pred$x[,1], g=wine$type)
wine.pred <- predict(wine.lda, wine.pca$x[,1:4])
for (i in 1:4){
ldahist(data = wine.pred$x[,i], g=wine$type)
}
wine.pred$x
wine.pred <- predict(wine.lda, wine.pca$x[,1:4])
for (i in 1:2){
ldahist(data = wine.pred$x[,i], g=wine$type)
}
ldahist(data = wine.pred$x[,1], g=wine.pca$x[,1])
ldahist(data = wine.pred$x[,1], g=wine$type)
wine.pred <- predict(wine.lda, wine.pca$x[,1:4])
ldahist(data = wine.pred$x[,1], g=wine$type)
ldahist(data = wine.pred$x[,2], g=wine$type)
