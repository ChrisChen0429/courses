estimated_q
estimated_q <- round(DINA.jags$BUGSoutput$mean$Q,1)
estimated_q
estimated_q <- round(DINA.jags$BUGSoutput$mean$Q,0)
estimated_q
data$Q
mean(data$Q ==estimated_q)
estimated_alpha <- DINA.jags$BUGSoutput$mean$alpha
estimated_alpha
estimated_alpha <- round(DINA.jags$BUGSoutput$mean$alpha,0)
mean(data$alpha ==estimated_alpha)
estimated_alpha <- round(DINA.jags$BUGSoutput$mean$alpha,0)
mean(data$alpha ==estimated_alpha)
round(1.5)
round(1.49999)
round(1.500001)
abind
library(abind)
?abind
x <- matrix(1:12,3,4)
y <- x+100
dim(abind(x,y,along=0))
x
y
abind(c(x,y))
abind(c(x,y),along = 0)
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q_ploy <- array(NA,c(J,K,prod(l)-1))
Q_ploy
alpha.pattern
alpha.pattern <- alpha.pattern[rowsum(alpha.pattern) > 0,]
rowsum(alpha.pattern)
rowSum(alpha.pattern)
rowSums(alpha.pattern)
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
alpha.pattern
q
Q
apply(Q,1,sum)
apply(Q,2,sum)
l
23 * 2^27 * 3^21 * 2^24
library(rjags)
library(R2jags)
DINA.SIM <- function(N,L,Q){  # L is the list of difficulity level
# generate the guessing and sliping
set.seed(123)
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.5)
g <- runif(J,0, 1-s)
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q
Q_ploy <- array(NA,c(J,K,D_1))
for (t in 1:(D+1)){
Q_ploy[t,,] <- Q
for (j in 1:J){
for (k in 1:K){
Q_ploy[t,j,k] <- ifelse(Q_ploy[j,k] == 0,0,))
}
}
}
# sample attribute pattern
C=nrow(alpha.pattern)
delta=rep(1,C)
alpha <- matrix(NA, nrow = N,ncol = K)
pai <- DirichletReg::rdirichlet(1,alpha = delta)
for (i in 1:N){
c <- sample(1:C,size = 1,replace = T,prob = pai)
alpha[i,] <- as.numeric(alpha.pattern[c,])
}
# generate the response
y <- matrix(NA,nrow = N,ncol = J)
w <- array(0,c(N,J,K))
p <- matrix(0,ncol = J,nrow = N)
for (i in 1:N){
for (j in 1:J){
for (k in 1:K){
w[i,j,k] <- ifelse(Q_ploy[j,k]==0,0,ifelse(alpha[i,k]>=Q_ploy[j,k],1,0))
}
p[i,j] <- g[j] + (1-s[j]-g[j])*prod(w[i,j,1:K])
y[i,j] <- sample(x = c(0,1),size = 1,replace = F,prob = c(1-p[i,j],p[i,j]))
}
}
pai_q <- matrix(0,ncol = max(l),nrow = K)
for (k in 1:K){
pai_q[k,1:l[k]] <- rep(1/l[k],l[k])
}
parameter <- list(alpha=alpha,s=s,g=g,y=y,Q_orig=Q,Q=Q_ploy,delta=delta,all.patterns=alpha.pattern,pai_q=pai_q,C=C,N=N,J=J,K=K,pai_a = pai,s=s,g=g)
return(parameter)
#file_name_dat <- paste(c("parameter_q",as.character(index_q),"N",as.character(N),".rds"),sep = "_",collapse = '')
#saveRDS(parameter, file_name_dat)
}
q = matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1,
1,1,0,0,
1,0,1,0,
1,0,0,1,
0,1,1,0,
0,1,0,1,
0,0,1,1,
1,1,1,0,
1,1,0,1,
1,0,1,1,
0,1,1,1,
1,1,1,1), byrow=TRUE, nrow=15, ncol=4)
N = 1000
L = list(0:1,0:2,0:3,0:2)
J <- nrow(Q)
J <- nrow(Q)
J
Q = matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1,
1,1,0,0,
1,0,1,0,
1,0,0,1,
0,1,1,0,
0,1,0,1,
0,0,1,1,
1,1,1,0,
1,1,0,1,
1,0,1,1,
0,1,1,1,
1,1,1,1), byrow=TRUE, nrow=15, ncol=4)
N = 1000
L = list(0:1,0:2,0:3,0:2)
Q
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.5)
g <- runif(J,0, 1-s)
s
g
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.3)
g <- runif(J,0,0.3)
s
g
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
alpha.pattern
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q_ploy <- Q
for (j in 1:J){
for (k in 1:K){
Q_ploy[j,k] <- ifelse(Q_ploy[j,k] == 0,0,sample(x=1:l[k],size = 1))
}
}
Q_ploy
View(Q)
View(Q)
library(rjags)
library(R2jags)
DINA.SIM <- function(N,L,Q){  # L is the list of difficulity level
# generate the guessing and sliping
set.seed(123)
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.3)
g <- runif(J,0,0.3)
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q_ploy <- Q
for (j in 1:J){
for (k in 1:K){
Q_ploy[j,k] <- ifelse(Q_ploy[j,k] == 0,0,sample(x=1:l[k],size = 1))
}
}
# sample attribute pattern
C=nrow(alpha.pattern)
delta=rep(1,C)
alpha <- matrix(NA, nrow = N,ncol = K)
pai <- DirichletReg::rdirichlet(1,alpha = delta)
for (i in 1:N){
c <- sample(1:C,size = 1,replace = T,prob = pai)
alpha[i,] <- as.numeric(alpha.pattern[c,])
}
# generate the response
y <- matrix(NA,nrow = N,ncol = J)
w <- array(0,c(N,J,K))
p <- matrix(0,ncol = J,nrow = N)
for (i in 1:N){
for (j in 1:J){
for (k in 1:K){
w[i,j,k] <- ifelse(Q_ploy[j,k]==0,0,ifelse(alpha[i,k]>=Q_ploy[j,k],1,0))
}
p[i,j] <- g[j] + (1-s[j]-g[j])*prod(w[i,j,1:K])
y[i,j] <- sample(x = c(0,1),size = 1,replace = F,prob = c(1-p[i,j],p[i,j]))
}
}
pai_q <- matrix(0,ncol = max(l),nrow = K)
for (k in 1:K){
pai_q[k,1:l[k]] <- rep(1/l[k],l[k])
}
parameter <- list(alpha=alpha,s=s,g=g,y=y,Q_orig=Q,Q=Q_ploy,delta=delta,all.patterns=alpha.pattern,pai_q=pai_q,C=C,N=N,J=J,K=K,pai_a = pai,s=s,g=g)
return(parameter)
#file_name_dat <- paste(c("parameter_q",as.character(index_q),"N",as.character(N),".rds"),sep = "_",collapse = '')
#saveRDS(parameter, file_name_dat)
}
Q = matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1,
1,1,0,0,
1,0,1,0,
1,0,0,1,
0,1,1,0,
0,1,0,1,
0,0,1,1,
1,1,1,0,
1,1,0,1,
1,0,1,1,
0,1,1,1,
1,1,1,1), byrow=TRUE, nrow=15, ncol=4)
data <- DINA.SIM(N = 1000,L = list(0:1,0:2,0:3,0:2),Q)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,Q_orig=data$Q_orig,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a)
DINA.jags <- jags(model.file = "semi-q.txt",data = jags.data,parameters.to.save = c("alpha","s","g","Q"))
estimated_s <- DINA.jags$BUGSoutput$mean$s
data$Q
library(rjags)
library(R2jags)
DINA.SIM <- function(N,L,Q){  # L is the list of difficulity level
# generate the guessing and sliping
set.seed(123)
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.3)
g <- runif(J,0,0.3)
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q_ploy <- Q
for (j in 1:J){
for (k in 1:K){
Q_ploy[j,k] <- ifelse(Q_ploy[j,k] == 0,0,sample(x=1:l[k],size = 1))
}
}
# sample attribute pattern
C=nrow(alpha.pattern)
delta=rep(1,C)
alpha <- matrix(NA, nrow = N,ncol = K)
pai <- DirichletReg::rdirichlet(1,alpha = delta)
for (i in 1:N){
c <- sample(1:C,size = 1,replace = T,prob = pai)
alpha[i,] <- as.numeric(alpha.pattern[c,])
}
# generate the response
y <- matrix(NA,nrow = N,ncol = J)
w <- array(0,c(N,J,K))
p <- matrix(0,ncol = J,nrow = N)
for (i in 1:N){
for (j in 1:J){
for (k in 1:K){
w[i,j,k] <- ifelse(Q_ploy[j,k]==0,0,ifelse(alpha[i,k]>=Q_ploy[j,k],1,0))
}
p[i,j] <- g[j] + (1-s[j]-g[j])*prod(w[i,j,1:K])
y[i,j] <- sample(x = c(0,1),size = 1,replace = F,prob = c(1-p[i,j],p[i,j]))
}
}
pai_q <- matrix(0,ncol = max(l),nrow = K)
for (k in 1:K){
pai_q[k,1:l[k]] <- rep(1/l[k],l[k])
}
parameter <- list(alpha=alpha,s=s,g=g,y=y,Q_orig=Q,Q=Q_ploy,delta=delta,all.patterns=alpha.pattern,pai_q=pai_q,C=C,N=N,J=J,K=K,pai_a = pai,s=s,g=g)
return(parameter)
#file_name_dat <- paste(c("parameter_q",as.character(index_q),"N",as.character(N),".rds"),sep = "_",collapse = '')
#saveRDS(parameter, file_name_dat)
}
Q = matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1,
1,1,0,0,
1,0,1,0,
1,0,0,1,
0,1,1,0,
0,1,0,1,
0,0,1,1,
1,1,1,0,
1,1,0,1,
1,0,1,1,
0,1,1,1,
1,1,1,1), byrow=TRUE, nrow=15, ncol=4)
data <- DINA.SIM(N = 1000,L = list(0:1,0:2,0:3,0:2),Q)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,Q_orig=data$Q_orig,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.jags <- jags(model.file = "semi-q.txt",data = jags.data,parameters.to.save = c("alpha","s","g","Q"))
estimated_s <- DINA.jags$BUGSoutput$mean$s
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.jags <- jags(model.file = "semi-q.txt",data = jags.data,parameters.to.save = c("alpha","s","g","Q"))
DINA.jags <- jags.model(model.file = "semi-q.txt",data = jags.data,parameters.to.save = c("alpha","s","g","Q"))
DINA.jags <- jags.model("semi-q.txt",data = jags.data)
DINA.model <- jags.model("semi-q.txt",data = jags.data)
library(rjags)
library(R2jags)
DINA.SIM <- function(N,L,Q){  # L is the list of difficulity level
# generate the guessing and sliping
set.seed(123)
J <- nrow(Q)
K <- ncol(Q)
s <- runif(J,0,0.3)
g <- runif(J,0,0.3)
# generate possible pattern for alpha
alpha.pattern <- do.call(expand.grid,L)
alpha.pattern <- alpha.pattern[rowSums(alpha.pattern) > 0,]
# generate possible pattern for ploytomous Q
l <- as.numeric(sapply(L,max))
Q_ploy <- Q
for (j in 1:J){
for (k in 1:K){
Q_ploy[j,k] <- ifelse(Q_ploy[j,k] == 0,0,sample(x=1:l[k],size = 1))
}
}
# sample attribute pattern
C=nrow(alpha.pattern)
delta=rep(1,C)
alpha <- matrix(NA, nrow = N,ncol = K)
pai <- DirichletReg::rdirichlet(1,alpha = delta)
for (i in 1:N){
c <- sample(1:C,size = 1,replace = T,prob = pai)
alpha[i,] <- as.numeric(alpha.pattern[c,])
}
# generate the response
y <- matrix(NA,nrow = N,ncol = J)
w <- array(0,c(N,J,K))
p <- matrix(0,ncol = J,nrow = N)
for (i in 1:N){
for (j in 1:J){
for (k in 1:K){
w[i,j,k] <- ifelse(Q_ploy[j,k]==0,0,ifelse(alpha[i,k]>=Q_ploy[j,k],1,0))
}
p[i,j] <- g[j] + (1-s[j]-g[j])*prod(w[i,j,1:K])
y[i,j] <- sample(x = c(0,1),size = 1,replace = F,prob = c(1-p[i,j],p[i,j]))
}
}
pai_q <- matrix(0,ncol = max(l),nrow = K)
for (k in 1:K){
pai_q[k,1:l[k]] <- rep(1/l[k],l[k])
}
parameter <- list(alpha=alpha,s=s,g=g,y=y,Q_orig=Q,Q=Q_ploy,delta=delta,all.patterns=alpha.pattern,pai_q=pai_q,C=C,N=N,J=J,K=K,pai_a = pai,s=s,g=g)
return(parameter)
#file_name_dat <- paste(c("parameter_q",as.character(index_q),"N",as.character(N),".rds"),sep = "_",collapse = '')
#saveRDS(parameter, file_name_dat)
}
Q = matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1,
1,1,0,0,
1,0,1,0,
1,0,0,1,
0,1,1,0,
0,1,0,1,
0,0,1,1,
1,1,1,0,
1,1,0,1,
1,0,1,1,
0,1,1,1,
1,1,1,1), byrow=TRUE, nrow=15, ncol=4)
data <- DINA.SIM(N = 1000,L = list(0:1,0:2,0:3,0:2),Q)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.model <- jags.model("semi-q.txt",data = jags.data)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.model <- jags.model("semi-q.txt",data = jags.data)
update(DINA.model,1000)
jags.samples(DINA.model,c("s","g","Q","alpha"))
jags.samples(DINA.model,c("s","g","Q","alpha"))
jags.samples(DINA.model,c("s","g","Q","alpha"),n.iter = 1000)
result <- jags.samples(DINA.model,c("s","g","Q","alpha"),n.iter = 1000)
View(result)
View(result)
result[["Q"]]
DINA.model
estimated_s <- result$s
rmse_s <- sqrt(mean((data$s - estimated_s)^2))
rmse_s
estimated_g <- result$g
rmse_g <- sqrt(mean((data$g - estimated_g)^2))
rmse_g
estimated_q <- round(result$Q,0)
mean(data$Q ==estimated_q)
result$Q
round(result$Q,0)
estimated_q <- round(as.matrix(result$Q),0)
estimated_q
round(result$Q,0)
round(result$alpha,0)
estimated_alpha <- round(result$alpha,0)
mean(data$alpha ==estimated_alpha)
estimated_alpha
DINA.model <- jags("semi-q.txt",data = jags.data)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.model <- jags("semi-q.txt",data = jags.data,parameters.to.save = c("s","g","Q","alpha"))
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.model <- jags("semi-q.txt",data = jags.data,parameters.to.save = c("s","g","Q","alpha"))
DINA.model <- jags("semi-q.txt",data = jags.data,parameters.to.save = c("s","g","Q","alpha"),n.iter = 1000)
DINA.model <- jags("semi-q.txt",data = jags.data,parameters.to.save = c("s","g","Q","alpha"),n.iter = 1000,n.burnin = 1000,n.chains = 4)
DINA.model <- jags(jags.module = "semi-q.txt",data = jags.data,parameters.to.save = c("s","g","Q","alpha"),n.iter = 1000,n.burnin = 1000,n.chains = 4)
jags.data <- list(N=data$N,J=data$J,K=data$K,y=data$y,delta=data$delta,C=data$C,all.patterns=data$all.patterns,pai_q=data$pai_q,pai_a=data$pai_a,Q_star=data$Q)
DINA.model <- jags(model.file = "semi-q.txt",data = jags.data,parameters.to.save = c("alpha","s","g","Q"))
estimated_s <- DINA.model$BUGSoutput$mean$s
rmse_s <- sqrt(mean((data$s - estimated_s)^2))
rmse_s
estimated_g <- DINA.model$BUGSoutput$mean$g
rmse_g <- sqrt(mean((data$g - estimated_g)^2))
rmse_
rmse_g
estimated_q <- round(DINA.model$BUGSoutput$mean$Q,0)
mean(data$Q ==estimated_q)
DINA.model$BUGSoutput$mean$Q
estimated_alpha <- round(result$alpha,0)
estimated_alpha <- round(DINA.model$BUGSoutput$mean$alpha,0)
mean(data$alpha ==estimated_alpha)
DINA.model$BUGSoutput$mean$alpha
DINA.model$BUGSoutput$sims.array
View(DINA.model)
DINA.model[["BUGSoutput"]][["sims.list"]][["Q"]]
DINA.model[["BUGSoutput"]][["sims.list"]][["Q"]][1,,]
estimated_Q <- matrix(NA,nrow = 15,ncol = 4)
DINA.model[["BUGSoutput"]][["sims.list"]][["Q"]][,1,1]
estimated_Q <- matrix(NA,nrow = 15,ncol = 4)
for (j in 1:15){
for (k in 1:4){
estimated_Q[j,k] <- median(DINA.model[["BUGSoutput"]][["sims.list"]][["Q"]][,j,k])
}
}
estimated_Q
estimated_Q == data$Q
data$Q
estimated_Q
data$alpha
estimated_alpha <- matrix(NA,nrow = 1000,ncol = 4)
for (i in 1:1000){
for (k in 1:4){
estimated_alpha[i,k] <- median(DINA.model[["BUGSoutput"]][["sims.list"]][["alpha"]][,i,k])
}
}
estimated_alpha
estimated_alpha == data$alpha
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/hw/homework5")
knitr::opts_chunk$set(echo = TRUE)
data <- read.table('T11-7.DAT',header = F)
## load the data
(data <- read.table('T11-7.DAT',header = F))
x1 <- c(3.9,2.7,2.8,3.1,3.5,3.9,2.7,5.0,3.4,1.2,8.4,4.2,4.2,3.9,3.9,7.3,4.4,3.0,6.3,1.7,7.3,7.8,7.8,7.8,9.5,7.7,11.0,8.0,8.4,10.0,7.3,9.5,8.4,8.4,9.5,7.2,4.0,6.7,9.0,7.8,4.5,6.2,5.6,9.0,8.4,9.5,9.0,6.2,7.3,3.6,6.2,7.3,4.1,5.4,5.0,6.2)
x2 <- c(51,49,36,45,46,43,35,47,32,12,17,36,35,41,36,32,46,30,13,5.6,24,18,25,26,17,14,20,14,18,18,15,22,15,17,25,22,12,52,27,29,41,34,20,14,20,19,20,16,20,15,34,22,29,29,34,27)
x3 <- c(0.2,0.07,0.3,0.08,0.1,0.07,0,0.07,0.2,0,0.07,0.5,0.5,0.1,0.07,0.3,0.07,0,0.5,1,0,0.5,0.07,1,0.05,0.3,0.5,0.3,0.2,0.1,0.05,0.3,0.2,0.2,0.5,1,0.5,0.5,0.3,1.5,0.5,0.7,0.5,0.2,0.1,0.5,0.5,0.05,0.5,0.7,0.07,0,0.7,0.2,0.7,0.3)
x4 <- c(7.06,7.14,7,7.2,7.81,6.25,5.11,7.06,5.82,5.54,6.31,9.25,5.69,5.63,6.19,8.02,7.54,5.12,4.24,5.69,4.34,3.92,5.39,5.02,3.52,4.65,4.27,4.32,4.38,3.06,3.76,3.98,5.02,4.42,4.44,4.7,5.71,4.8,3.69,6.72,3.33,7.56,5.07,4.39,3.74,3.72,5.97,4.23,4.39,7,4.84,4.13,5.78,4.64,4.21,3.97)
x5 <- c(12.19,12.23,11.3,13.01,12.63,10.42,9,6.1,4.69,3.15,4.55,4.95,2.22,2.94,2.27,12.92,5.76,10.77,8.27,4.64,2.99,6.09,6.2,2.5,5.71,8.63,8.4,7.87,7.98,7.67,6.84,5.02,10.12,8.25,5.95,3.49,6.32,3.2,3.3,5.75,2.27,6.93,6.7,8.33,3.77,7.37,11.17,4.18,3.5,4.82,2.37,2.7,7.76,2.65,6.5,2.97)
X <- cbind(x1,x2,x3,x4,x5)
zone <- c(rep(1,7),rep(2,11),rep(3,38))
(data <- data.frame(cbind(X,zone)))
(data <- read.table('T11-7.DAT',header = F))
(data <- read.table('T11-7.DAT',header = F))
zone <- as.numeric(as.factor(data$V6))
## load the data
(data <- read.table('T11-7.DAT',header = F))
zone <- as.numeric(as.factor(data$V6))
library(dplyr)
## load the data
(data <- read.table('T11-7.DAT',header = F))
(zone <- as.numeric(as.factor(data$V6)))
n1 = table(zone)[1]
n1
n1 = as.numeric(table(zone)[1])
n2 = as.numeric(table(zone)[2])
n3 = as.numeric(table(zone)[3])
(n = c(n1,n2,n3))
library(dplyr)
n1 = as.numeric(table(zone)[1])
n2 = as.numeric(table(zone)[2])
n3 = as.numeric(table(zone)[3])
(n = c(n1,n2,n3))
g = length(unique(data$V6))
p = ncol(data) -1
## calculate the mean of variable for each group
(group.bar <- data %>% group_by(zone) %>% summarise_all(funs(mean)))
## calculate the mean of variable for each group
(group.bar <- data %>% group_by(V6) %>% summarise_all(funs(mean)))
## calculate the overall mean
(x.bar <- colMeans(data[,1:5]))
## calculate treatment sum of squre (B)
B <- 0
for (i in 1:g){
B <- B + n[i] * t(as.matrix(group.bar[i,2:(p+1)] - x.bar)) %*% (as.matrix(group.bar[i,2:(p+1)] - x.bar))
}
## calculate the residual sum of square (W)
W <- 0
for (i in 1:g){
group.cov <- cov(data %>% filter(zone==i) %>% select(1:5))
W <- W + (n[i]-1) * group.cov
}
## calculate the wilks' lambda
(Lambda = det(W)/det(B + W))
