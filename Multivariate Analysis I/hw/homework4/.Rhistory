library(dplyr)
# delete the data fro Alaska and Hawaii
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI'))
View(data)
unique(data$statebf)
library(plotly)
install.packages()
install.packages('plotly')
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
View(df)
df <- IPOcases_mergepriceindex200110
d <- IPOcases_mergepriceindex200110$numberofemployees
d[is.na(d)] <- 0
df$q <- with(df, cut(d, breaks = unique(quantile(d))))
levels(df$q) <- paste(c("1st", "2nd"), "Quantile")
df$q <- as.ordered(df$q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~d, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
p
IPOcases_mergepriceindex200110$long
colnames(data)
knitr::opts_chunk$set(echo = TRUE)
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','numberofemployees','sharesfiledinthismkt','principalamountmil'))
View(data)
summary(data)
4712/10742
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','state'numberofemployees','sharesfiledinthismkt','principalamountmil'))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI'))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
data$numberofemployees <-
data %>% group_by(statebf) %>%
mutate(numberofemployees= ifelse(is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE), numberofemployees))
data
is.na(data$numberofemployees)
all(is.na(data$numberofemployees))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
#data$numberofemployees <-
data %>% group_by(statebf) %>% mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE)))
data <- data %>% group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
View(data)
View(df)
View(df)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
View(df)
data$numberofemployees_q <- with(data, cut(numberofemployees, quantile(numberofemployees)))
data <- data %>% group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
library(tidyr)
library(readr)
library(dplyr)
library(plotly)
library(tidyr)
IPOcases_mergepriceindex200110 <- read_csv("IPOcases_mergepriceindex200110.csv")
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
summary(data)
data <- data %>% drop_na(long,lat) %>%
group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
data$numberofemployees_q <- with(data, cut(numberofemployees, quantile(numberofemployees)))
View(data)
quantile(data$numberofemployees)
quantile(data$numberofemployees)
data$numberofemployees
is.na(data$numberofemployees)
!is.na(data$numberofemployees)
all(!is.na(data$numberofemployees))
data$numberofemployees
data$numberofemployees[which(is.na(data$numberofemployees))]
which(is.na(data$numberofemployees))
summary(data)
sum(data$statebf == 'UN')
data$numberofemployees[which(data$statebf)=='UN']
data$numberofemployees[which(data$statebf=='UN')]
data_employee <- data %>% drop_na(numberofemployees)
data_employee
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
View(data_employee)
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~d, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
p
View(data_employee)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'IPOo<br>', geo = g)
p
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'Number of Employees for IPOs', geo = g)
p
View(df)
View(df)
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'Number of Employees for IPOs', geo = g)
p
data$sharesfiledinthismkt_q <- with(data, cut(sharesfiledinthismkt, quantile(sharesfiledinthismkt)))
levels(data$sharesfiledinthismkt_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data$sharesfiledinthismkt_q <- as.ordered(data$sharesfiledinthismkt_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~sharesfiledinthismkt, color = ~sharesfiledinthismkt_q, hoverinfo = "text") %>%
layout(title = 'Shared Filed in this Market for IPOs', geo = g)
p
data$sharesfiledinthismkt_q <- with(data, cut(sharesfiledinthismkt, quantile(sharesfiledinthismkt)))
levels(data$sharesfiledinthismkt_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data$sharesfiledinthismkt_q <- as.ordered(data$sharesfiledinthismkt_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~sharesfiledinthismkt, color = ~sharesfiledinthismkt_q, hoverinfo = "text") %>%
layout(title = 'Shared Filed in this Market for IPOs', geo = g)
p
install.packages("mitml")
install.packages('jomo',dependencies = T,type = 'source')
package_version(jomo)
library(utils)
remove.packages('jomo')
remove.packages('mitml')
update.packages(ask=FALSE,
checkBuilt=TRUE,
repos="https://cloud.r-project.org")
install.packages('mitml')
pchisq(0.001,4)
qchisq(0.001,4)
pchisq(0.999,4)
qchisq(0.999,4)
qchisq(0.995,5)
qchisq(0.999,5)
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/hw/homework4")
knitr::opts_chunk$set(echo = TRUE)
x_bar <- c(mean(x1),mean(x2))
x1 <- c(0.48,40.53,2.19,0.55,0.74,0.66,0.93,0.37,0.22)
x2 <- c(12.57,73.68,11.13,20.03,20.29,0.78,4.64,0.43,1.08)
x_bar <- c(mean(x1),mean(x2))
mu0 <- c(0.5,20)
x <- cbind(x1,x2)
View(x)
x_bar <- colMeans(x)
mu0 <- c(0.5,20)
n <- nrow(x)
s <- cor(x)
(x_bar - mu0)
T_square <- n * t(x_bar - mu0) %*% solve(s) %>%(x_bar - mu0)
T_square <- n * t(x_bar - mu0) %*% solve(s) %*% (x_bar - mu0)
T_square
p <- ncol(x)
p <- ncol(x)
alpha <- 0.08
scaled_F <- (((n-1)*p)/(n-p)) * qf(alpha, p, n-p)
scaled_F
p.value <- pf(((n-p)/((n-1)*p))*T_square, p, n-p,lower.tail=FALSE)
p.value
x <- read.table("../T6-1.DAT")
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/hw/homework4")
x <- read.table("T6-1.DAT")
x
library(dplyr)
library(dplyr)
View(x)
```{r message=FALSE, warning=FALSE}
library(dplyr)
x <- read.table("T6-1.DAT")
x
View(x)
x <- x[-c(8),]
x
(d = cbind(x$V1 - x$V3, x$V2 - x$V4))
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
10*2*qf(0.95, 2, 9)/9
x <- read.table("T6-1.DAT")
x
(d = cbind(x$V1 - x$V3, x$V2 - x$V4))
(dbar = colMeans(d))
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
10*2*qf(0.95, 2, 9)/9
# V1 = BOD in commercial lab
# V2 = SS in commercial lab
# V3 = BOD in state lab
# V4 = SS in state lab
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
10*2*qf(0.95, 2, 9)/9
library(dplyr)
x <- read.table("T6-1.DAT")
x <- x[-c(8),]
x
x <- read.table("T6-1.DAT")
x <- x[-c(8),]
x
# V1 = BOD in commercial lab
# V2 = SS in commercial lab
# V3 = BOD in state lab
# V4 = SS in state lab
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
10*2*qf(0.95, 2, 9)/9
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
n <- 10
p <- 2
alpha = 0.05
scaled_F <- (((n-1)*p)/(n-p)) * qf(alpha, p, n-p)
scaled_F
p.value <- pf(((n-p)/((n-1)*p))*T.sq, p, n-p,lower.tail=FALSE)
p.value
p.value <- pf(((n-p)/((n-1)*p))*T.sq, p, n-p,lower.tail=FALSE)
p.value
x <- read.table("T6-15.DAT")
x
sample_0 <- x[which(x$V8==0),1:7]
View(sample_0)
x <- read.table("T6-15.DAT")
sample_1 <- x[which(x$V8==0),1:7]
sample_2 <- x[which(x$V8==1),1:7]
n1 <- nrow(sample_1)
n2 <- nrow(sample_2)
s1 <- cor(sample_1)
s2 <- cor(sample_2)
s_pooled <- ((n1 - 1)/(n1 + n2 - 2))*s1 + ((n2 - 1)/(n1 + n2 - 2))*s2
s_pooled
x <- read.table("T6-15.DAT")
sample_1 <- x[which(x$V8==0),1:7]
sample_2 <- x[which(x$V8==1),1:7]
n1 <- nrow(sample_1)
n2 <- nrow(sample_2)
s1 <- cor(sample_1)
s2 <- cor(sample_2)
s_pooled <- ((n1 - 1)/(n1 + n2 - 2))*s1 + ((n2 - 1)/(n1 + n2 - 2))*s2
x <- read.table("T6-15.DAT")
sample_1 <- x[which(x$V8==0),1:7]
sample_2 <- x[which(x$V8==1),1:7]
n1 <- nrow(sample_1)
n2 <- nrow(sample_2)
s1 <- cor(sample_1)
s2 <- cor(sample_2)
s_pooled <- ((n1 - 1)/(n1 + n2 - 2))*s1 + ((n2 - 1)/(n1 + n2 - 2))*s2
x1.bar <- colMeans(sample_1)
x2.bar <- colMeans(sample_2)
T.square <- t(x1.bar-x2.bar) %*% solve((1/n1+1/n2)*s_pooled) %*% (x1.bar-x2.bar)
T.square
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
n <- 10
p <- 2
alpha = 0.05
scaled_F <- (((n-1)*p)/(n-p)) * qf(1-alpha, p, n-p)
scaled_F
x1 <- c(0.48,40.53,2.19,0.55,0.74,0.66,0.93,0.37,0.22)
x2 <- c(12.57,73.68,11.13,20.03,20.29,0.78,4.64,0.43,1.08)
x <- cbind(x1,x2)
x_bar <- colMeans(x)
mu0 <- c(0.5,20)
n <- nrow(x)
s <- cor(x)
T_square <- n * t(x_bar - mu0) %*% solve(s) %*% (x_bar - mu0)
T_square
p <- ncol(x)
alpha <- 0.08
scaled_F <- (((n-1)*p)/(n-p)) * qf(1-alpha, p, n-p)
scaled_F
p.value <- pf(((n-p)/((n-1)*p))*T_square, p, n-p,lower.tail=FALSE)
p.value
x <- read.table("T6-1.DAT")
x <- x[-c(8),]
x
d = cbind(x$V1 - x$V3, x$V2 - x$V4)
dbar = colMeans(d)
T.sq = nrow(d) * t(dbar) %*% solve(cov(d)) %*% dbar
T.sq
n <- 10
p <- 2
alpha = 0.05
scaled_F <- (((n-1)*p)/(n-p)) * qf(1-alpha, p, n-p)
scaled_F
p.value <- pf(((n-p)/((n-1)*p))*T.sq, p, n-p,lower.tail=FALSE)
p.value
x <- read.table("T6-15.DAT")
sample_1 <- x[which(x$V8==0),1:7]
sample_2 <- x[which(x$V8==1),1:7]
n1 <- nrow(sample_1)
n2 <- nrow(sample_2)
s1 <- cor(sample_1)
s2 <- cor(sample_2)
s_pooled <- ((n1 - 1)/(n1 + n2 - 2))*s1 + ((n2 - 1)/(n1 + n2 - 2))*s2
x1.bar <- colMeans(sample_1)
x2.bar <- colMeans(sample_2)
T.square <- t(x1.bar-x2.bar) %*% solve((1/n1+1/n2)*s_pooled) %*% (x1.bar-x2.bar)
T.square
p <- nrow(sample_1)
alpha <- 0.05
scaled_F <- (((n1 + n2 - 2) * p)/(n1 + n2 - p -1))*qf(1-alpha, p, n1+n2-p-1)
p <- nrow(sample_1)
alpha <- 0.05
scaled_F <- (((n1 + n2 - 2) * p)/(n1 + n2 - p -1))*qf(1-alpha, p, n1+n2-p-1)
scaled_F
## lower bound
c.sq = (n1 + n2 - 2)*p/(n1+ n2 -p - 1)*qf(1-alpha,p, n1 + n2 - p -1)
(x1.bar[1] - x2.bar[1]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[1][1])
## lower bound
c.sq = (n1 + n2 - 2)*p/(n1+ n2 -p - 1)*qf(1-alpha,p, n1 + n2 - p -1)
(x1.bar[1] - x2.bar[1]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[1][1])
c.sq = (n1 + n2 - 2)*p/(n1+ n2 -p - 1)*qf(1-alpha,p, n1 + n2 - p -1)
## lower bound
(x1.bar[1] - x2.bar[1]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[1,1])
## lower bound
c.sq = (n1 + n2 - 2)*p/(n1+ n2 -p - 1)*qf(1-alpha,p, n1 + n2 - p -1)
## lower bound
(x1.bar[1] - x2.bar[1]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[1,1])
## up bound
(x1.bar[1] - x2.bar[1]) + sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[1,1])
for (i in 2:7){
print(paste("for the variable",as,character("i"),sep = " "))
## lower bound
print(c((x1.bar[i] - x2.bar[i]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i]),
(x1.bar[i] - x2.bar[i]) + sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i])))
}
for (i in 2:7){
print(paste("for the variable",as,character(i),sep = " "))
## lower bound
print(c((x1.bar[i] - x2.bar[i]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i]),
(x1.bar[i] - x2.bar[i]) + sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i])))
}
for (i in 2:7){
print(paste("for the variable",as.character(i),sep = " "))
## lower bound
print(c((x1.bar[i] - x2.bar[i]) - sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i]),
(x1.bar[i] - x2.bar[i]) + sqrt(c.sq) * sqrt((1/n1 + 1/n2)*s_pooled[i,i])))
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE))
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(round(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)),3)
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(round(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)),digits = 3)
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE))
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(as.numeric(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)))
}
x1.bar[6]-x2.bar[6]
x1.bar[3]-x2.bar[3]
x1.bar[5]-x2.bar[5]
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(sqrt(T.sq.test))
print(as.numeric(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)))
}
p <- 1
for (i in 1:7){
print(paste("p-value for the variable",as.character(i),sep = " "))
Sp <- ((n1 - 1)/(n1 + n2 - 2))*s1[i,i] + ((n2 - 1)/(n1 + n2 - 2))*s2[i,i]
T.sq.test <- (n1*n2/(n1+n2))*t(x1.bar[i]-x2.bar[i]) %*% solve(Sp) %*% (x1.bar[i]-x2.bar[i])
print(as.numeric(sqrt(T.sq.test)))
print(as.numeric(pf(((n1+n2-p-1)/((n1+n2-2)*p))*T.sq.test, p ,n1+n2-p-1,lower.tail=FALSE)))
}
