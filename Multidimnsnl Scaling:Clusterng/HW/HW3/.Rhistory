lm(p3[,1] ~p3_eigen[,1])
a <- lm(p3[,1] ~p3_eigen[,1])
a$coefficients
a$coefficients[1]
a$coefficients[1] + a$coefficients[2] * p3_eigen[,2]
plot(p3[,1],p3_eigen[,1])
# linear corelation
c(cor(p3[,1],p3_eigen[,1]),cor(p3[,2],p3_eigen[,2]),cor(p3[,3],p3_eigen[,3]))
# rank corelation
c(cor(p3[,1],p3_eigen[,1],method = 'k'),cor(p3[,2],p3_eigen[,2],method = 'k'),cor(p3[,3],p3_eigen[,3],method = 'k'))
plot(p3[,1],p3_eigen[,1])
plot(p3[,2],p3_eigen[,2])
plot(p3[,3],p3_eigen[,3])
# linear corelation
c(cor(p3[,1],p3_eigen[,1]),cor(p3[,2],p3_eigen[,2]),cor(p3[,3],p3_eigen[,3]))
# rank corelation
c(cor(p3[,1],p3_eigen[,1],method = 'k'),cor(p3[,2],p3_eigen[,2],method = 'k'),cor(p3[,3],p3_eigen[,3],method = 'k'))
plot(p3[,1],p3_eigen[,1])
abline(lm(p3[,1],p3_eigen[,1]))
# linear corelation
c(cor(p3[,1],p3_eigen[,1]),cor(p3[,2],p3_eigen[,2]),cor(p3[,3],p3_eigen[,3]))
# rank corelation
c(cor(p3[,1],p3_eigen[,1],method = 'k'),cor(p3[,2],p3_eigen[,2],method = 'k'),cor(p3[,3],p3_eigen[,3],method = 'k'))
plot(p3[,1],p3_eigen[,1])
abline(lm(p3[,1]~p3_eigen[,1]))
plot(p3[,2],p3_eigen[,2])
abline(lm(p3[,2]~p3_eigen[,2]))
plot(p3[,3],p3_eigen[,3])
abline(lm(p3[,3]~p3_eigen[,3]))
plot(p3[,1],p3_eigen[,1])
abline(lm(p3_eigen[,1]~p3[,1]))
# linear corelation
c(cor(p3[,1],p3_eigen[,1]),cor(p3[,2],p3_eigen[,2]),cor(p3[,3],p3_eigen[,3]))
# rank corelation
c(cor(p3[,1],p3_eigen[,1],method = 'k'),cor(p3[,2],p3_eigen[,2],method = 'k'),cor(p3[,3],p3_eigen[,3],method = 'k'))
plot(p3[,1],p3_eigen[,1])
abline(lm(p3_eigen[,1]~p3[,1]))
plot(p3[,2],p3_eigen[,2])
abline(lm(p3_eigen[,2]~p3[,2]))
plot(p3[,3],p3_eigen[,3])
abline(lm(p3_eigen[,3]~p3[,3]))
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
View(skills2020)
str(skills2020)
skill.eigen <- eigen(cor(sk))
skill.eigen$values
round(skill.eigen$vectors,2)
sk <- skills2020 %>%
#select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
summary(sk)
sk
sk <- skills2020 %>%
#select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
replace(., >1, 1)
sk <- skills2020 %>%
#select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))
summary(sk)
Rxc <- cor(sk)
round(Rxc,2)
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
sk <- skills2020 %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))  ##repalce all the number bigger than 1 as 1
summary(sk)
Rxc <- cor(sk)
round(Rxc,2)
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
v
cumsum(princ$sdev)/sum(princ$sdev)
sk <- skills2020 %>%
replace(., is.na(.), 0) %>%  ## repalce all the missing data as 0
select(7:(ncol(skills2020)-1)) %>%  ## seiect the skill columns
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%  # replace the OTHER columns
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))  ##repalce all the number bigger than 1 as 1
summary(sk)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
# summary(skills2020)
sk <- skills2020 %>%
replace(., is.na(.), 0) %>%  ## repalce all the missing data as 0
select(7:(ncol(skills2020)-1)) %>%  ## seiect the skill columns
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%  # replace the OTHER columns
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))  ##repalce all the number bigger than 1 as 1
summary(sk)
sk <- skills2020 %>%
replace(., is.na(.), 0) %>%  ## repalce all the missing data as 0
select(7:(ncol(skills2020)-1)) %>%  ## seiect the skill columns
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%  # replace the OTHER columns
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))  ##repalce all the number bigger than 1 as 1
#summary(sk)
head(sk)
sk <- skills2020 %>%
replace(., is.na(.), 0) %>%  ## repalce all the missing data as 0
select(7:(ncol(skills2020)-1)) %>%  ## seiect the skill columns
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%  # replace the OTHER columns
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0) %>%
mutate_if(is.numeric, ~1 * (. > 0))  ##repalce all the number bigger than 1 as 1
#summary(sk)
Rxc <- cor(sk)
round(Rxc,2)
Rxc <- cor(sk)
#round(Rxc,2)
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
cumsum(princ$sdev)/sum(princ$sdev)
## print out the first 3 components
p3 <- princ$loadings[,1:3]
print(p3)
possible_combination <- combn(3,2)
for (c in 1:ncol(possible_combination)){
combination <- possible_combination[,c]
cur_pair <- p3[,combination]
plot(cur_pair,pch = '')
text(cur_pair,colnames(sk))
}
skill.eigen <- eigen(cor(sk))
skill.eigen$values
#round(skill.eigen$vectors,2)
# compute the principal component from eignvalue and eigenvector
wgt <-diag(3)
for (i in 1:3){
wgt[i,i] <- sqrt(skill.eigen$values[i])
}
wgt
p3_eigen <- skill.eigen$vectors[,1:3] %*% wgt
p3_eigen
# linear corelation
c(cor(p3[,1],p3_eigen[,1]),cor(p3[,2],p3_eigen[,2]),cor(p3[,3],p3_eigen[,3]))
plot(p3[,1],p3_eigen[,1])
abline(lm(p3_eigen[,1]~p3[,1]))
plot(p3[,2],p3_eigen[,2])
abline(lm(p3_eigen[,2]~p3[,2]))
plot(p3[,3],p3_eigen[,3])
abline(lm(p3_eigen[,3]~p3[,3]))
p3vm <- varimax(p3_eigen,normalize = T,eps = 0)
p3vm
p3vm <- varimax(p3_eigen,normalize = T,eps = 1e-5)
p3vm
p3vm$loadings
p3vm
setwd("~/Desktop/yi/professional_study/courses/Multidimnsnl Scaling:Clusterng/HW/HW3")
knitr::opts_chunk$set(echo = TRUE)
D <- lower.tri(c(2,4,3,5,4,0), diag = FALSE)
D <- lower.tri(c(2,4,3,5,4,0), diag = FALSE)
D
D <- lower.tri(c(2,4,3,5,4,0), diag = c(0,0,0,0))
D
numeric(16)
lower.tri(D)
D[lower.tri(D)]
prox <- c(2,4,3,5,4,0)
D <- matrix(numeric(16),4,4)
k <- 1
for (i in 2:4){
for (j in 1:i-1){
D[i,j] <- prox[k]
k = k + 1
}
}
D
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
setwd("~/Desktop/yi/professional_study/courses/Multivariate Analysis I/hw/homework2")
knitr::opts_chunk$set(echo = TRUE)
x <- c(5,1,3)
y <- c(-1,3,1)
# the length of x
sqrt(sum(x^2))
# the length of y
sqrt(sum(y^2))
X <- matrix(c(-1,3,-2,2,4,2,5,2,3),nrow = 3,byrow = T)
X <- scale(X,scale = F)
X
lm(x[,1] ~ x[,2] + x[,3])
X <- matrix(c(-1,3,-2,2,4,2,5,2,3),nrow = 3,byrow = T)
X <- scale(X,scale = F)
X
lm(X[,1] ~ X[,2] + X[,3])
-1*X[,2] + X[,3] == x[,1]
-1*X[,2] + X[,3]
x[,1]
x[,1]
-1*X[,2] + X[,3] == X[,1]
X
X <- matrix(c(-1,3,-2,2,4,2,5,2,3),nrow = 3,byrow = T)
X <- scale(X,scale = F)
X
1/2(confusion + t(confusion))
(confusion + t(confusion))/2
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
(confusion + t(confusion))/2
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
symmetric_confusion <- (confusion + t(confusion))/2
symmetric_confusion
colMeans(symmetric_confusion)
max(symmetric_confusion)
apply(symmetric_confusion,1,max)
symmetric_confusion- apply(symmetric_confusion,1,max)
abs(symmetric_confusion - apply(symmetric_confusion,1,max))
dissimilarity <- abs(symmetric_confusion - apply(symmetric_confusion,1,max))
dissimilarity
#dissimilarity <- abs(symmetric_confusion - apply(symmetric_confusion,1,max))
dissimilarity <- abs(symmetric_confusion - max(symmetric_confusion))
dissimilarity
# all combination of 3 points
comb_3 <- combn(5,3)
comb_3
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
# all combination of 2 paris out of 3
comb_2 <- combn(3,2)
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in ncol(comb_3)){
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in ncol(comb_3)){
print(c(dissimilarity[comb_3[,i][1],comb_3[,i][2]],dissimilarity[comb_3[,i][1],comb_3[,i][3]],dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied <- c()
for (i in ncol(comb_3)){
print(i)
#print(c(dissimilarity[comb_3[,i][1],comb_3[,i][2]],dissimilarity[comb_3[,i][1],comb_3[,i][3]],dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied <- c()
for (i in ncol(comb_3)){
print(c(dissimilarity[comb_3[,i][1],comb_3[,i][2]],dissimilarity[comb_3[,i][1],comb_3[,i][3]],dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
i
comb_3[,10]
comb_3
dissimilarity[comb_3[,i][1],comb_3[,i][2]]
dissimilarity[comb_3[,i][1],comb_3[,i][3]]
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in ncol(comb_3)){
print(c(dissimilarity[comb_3[,i][1],comb_3[,i][2]],dissimilarity[comb_3[,i][1],comb_3[,i][3]],dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
diag(dissimilarity) <- 0
dissimilarity
d_square <- dissimilarity^2
d_square
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in 1:ncol(comb_3)){
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in 1:ncol(comb_3)){
print(i)
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in 1:ncol(comb_3)){
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
sum(d_square)
b <- d_square
for (i in 1:nrow(d_square)){
for (j in 1:ncol(d_square)){
b[i,j] <- (-1/2) * (d_square[i,j] - colnames(d_square)[j] - rowMeans(d_square)[i] + sum(d_square)/(nrow(d_square)*ncol(d_square)))
}
}
i
k
j
b
b[1,1]
d_square[i,j] - colnames(d_square)[j] - rowMeans(d_square)[i] + sum(d_square)/(nrow(d_square)*ncol(d_square))
colnames(d_square)[j]
colnames(d_square)
b <- d_square
for (i in 1:nrow(d_square)){
for (j in 1:ncol(d_square)){
b[i,j] <- (-1/2) * (d_square[i,j] - colMeans(d_square)[j] - rowMeans(d_square)[i] + sum(d_square)/(nrow(d_square)*ncol(d_square)))
}
}
b
source('~/.active-rstudio-document', echo=TRUE)
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
symmetric_confusion <- (confusion + t(confusion))
symmetric_confusion
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
symmetric_confusion <- (confusion + t(confusion))/2
symmetric_confusion
m <- col(dissimilarity)
m
m
m
m <- ncol(dissimilarity)
m
m <- ncol(dissimilarity)
minc <- 0
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
symmetric_confusion <- (confusion + t(confusion))/2
symmetric_confusion
#dissimilarity <- abs(symmetric_confusion - apply(symmetric_confusion,1,max))
dissimilarity <- abs(symmetric_confusion - max(symmetric_confusion))
dissimilarity
m <- ncol(dissimilarity)
minc <- 0
for (k in 3:m){
for (j in 2:(k-1)){
for (i in 1:(i-1)){
c1 <- dissimilarity[i,j] + dissimilarity[j,k] - dissimilarity[i,k]
c1 <- dissimilarity[j,k] + dissimilarity[i,k] - dissimilarity[i,j]
c1 <- dissimilarity[i,j] + dissimilarity[i,k] - dissimilarity[j,k]
minc <- min(minc,c1,c2,c3)
}
}
}
m <- ncol(dissimilarity)
minc <- 0
for (k in 3:m){
for (j in 2:(k-1)){
for (i in 1:(i-1)){
c1 <- dissimilarity[i,j] + dissimilarity[j,k] - dissimilarity[i,k]
c2 <- dissimilarity[j,k] + dissimilarity[i,k] - dissimilarity[i,j]
c3 <- dissimilarity[i,j] + dissimilarity[i,k] - dissimilarity[j,k]
minc <- min(minc,c1,c2,c3)
}
}
}
minc
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in 1:ncol(comb_3)){
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
d_square <- dissimilarity^2
d_square
diag(dissimilarity) <- 0
dissimilarity
confusion <-  matrix(c(97,4,4,7,2,9,87,8,37,9,8,16,93,12,12,11,59,17,96,12,9,15,26,12,86),nrow = 5,byrow = T)
confusion
symmetric_confusion <- (confusion + t(confusion))/2
symmetric_confusion
#dissimilarity <- abs(symmetric_confusion - apply(symmetric_confusion,1,max))
dissimilarity <- abs(symmetric_confusion - max(symmetric_confusion))
dissimilarity
# all combination of 3 points out of 5
comb_3 <- combn(5,3)
dis_satisfied <- c()
for (i in 1:ncol(comb_3)){
if ((dissimilarity[comb_3[,i][1],comb_3[,i][2]] > dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]) |
(dissimilarity[comb_3[,i][1],comb_3[,i][2]] < dissimilarity[comb_3[,i][1],comb_3[,i][3]] - dissimilarity[comb_3[,i][2],comb_3[,i][3]])){
dis_satisfied <- c(dis_satisfied,dissimilarity[comb_3[,i][1],comb_3[,i][2]] - (dissimilarity[comb_3[,i][1],comb_3[,i][3]] + dissimilarity[comb_3[,i][2],comb_3[,i][3]]))
}
}
dis_satisfied
diag(dissimilarity) <- 0
dissimilarity
d_square <- dissimilarity^2
d_square
mean(d_square)
b <- d_square
for (i in 1:m){
for (j in 1:m){
b[i,j] <- -0.5 * (d_square[i,j] - colMeans(d_square)[j] - rowMeans(d_square)[i] + mean(d_square))
}
}
b
Bcomp <- eigen(B)
Bcomp <- eigen(b)
Bcomp
wts <- diag(3)
wts
Bcomp
Bcomp <- eigen(b)
wts <- diag(sqrt(Bcomp$values))
wts
principal <- Bcomp %*% wts
Bcomp <- eigen(b)
wts <- diag(sqrt(Bcomp$values))
principal <- Bcomp$vectors %*% wts
principal
round(principal,2)
Bcomp$values
Bcomp <- eigen(b)
wts <- diag(sqrt(Bcomp$values))
principal <- Bcomp$vectors %*% wts
round(principal,2)
plot(principal,pch="")
points <- c("E","H",'N',"S","W")
text(principal,points)
plot(principal,pch="")
points <- c("E","H",'N',"S","W")
text(principal,points)
plot(principal[,1:4],pch="")
points <- c("E","H",'N',"S","W")
text(principal[,1:4],points)
setwd("~/Desktop/yi/professional_study/courses/Multidimnsnl Scaling:Clusterng/HW/HW3")
princ <- princomp(x = b,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
plot(principal[,1:2],pch="")
points <- c("E","H",'N',"S","W")
text(principal[,1:2],points)
