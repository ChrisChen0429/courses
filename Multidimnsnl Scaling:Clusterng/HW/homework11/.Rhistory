ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<30) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<30) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<30) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<30) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
Q
table(Q)
table(Q) / sum(Q)
(table(Q) / sum(Q)) * 100
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(101)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(123)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(1234)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(12345)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(102)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(103)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
normal_sample
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
table(Q)
table(Q) / sum(Q)
table(Q) / sum(Q) * 100
setwd("~/Desktop/yi/professional_study/courses/Multidimnsnl Scaling:Clusterng/HW/homework11")
knitr::opts_chunk$set(echo = TRUE)
# load the data set
sport <- read.table('SPORTS.txt')
# load the data set
sport <- read.table('SPORTS.txt',header = F)
# load the data set
sport <- read.table('SPORTS.txt',header = F,sep = '/t')
install.packages('FAiR')
# load the data set
sport <- scan('SPORTS.txt')
# load the data set
sport <- scan('SPORTS.txt')
sport <- scan('SPORTS.txt')
sport
sport <- scan('SPORTS.txt')
dims <- floor(sqrt(length(sport) * 2))
sport <- scan('SPORTS.txt')
dims <- floor(sqrt(length(sport) * 2))
m <- matrix(NA, dims, dims)
m[upper.tri(m, diag = TRUE)] <- sport
m <- t(m)
sport <- m
temp <- scan('SPORTS.txt')
dims <- floor(sqrt(length(temp) * 2))
sport <- matrix(NA, dims, dims)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
sport
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
dims <- floor(sqrt(length(temp) * 2))
sport <- matrix(NA, dims, dims)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
source('~/Desktop/yi/professional_study/courses/Multidimnsnl Scaling:Clusterng/class/week11/R_fitting trees to prox data_spr 2020.R', echo=TRUE)
==============================================================
# install the "clue" package for fitting trees
install.packages(clue)
==============================================================
# install the "clue" package for fitting trees
install.packages(clue)
install.packages('clue')
library(clue)
#=================================================
# now fit an ultrametric tree (LS solution, by iterative projection) to a sample data set
eurodist   # a sample data set = distances among European cities
#=================================================
# now fit an ultrametric tree (LS solution, by iterative projection) to a sample data set
a <- eurodist   # a sample data set = distances among European cities
a
sport
colnames(sport) <- sport_name
dim(sport)
length(sport_name)
temp
length(temp)
sqrt(190)
14*15
13*14
temp
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
colnames(sport) <- sport_name
View(sport)
sport <- rbind(rep(NA,19),sport)
View(sport)
a
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
sport <- cbind(rep(NA,19),sport)
View(sport)
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
sport <- rbind(rep(NA,19),sport)
sport <- cbind(rep(NA,29),sport)
a_dis <- dist.to.matrix(a)
library()
install.packages("multivariance")
library(multivariance)
a_dist <- dist.to.matrix(a)
(1+19)*19
ultraD<-ls_fit_ultrametric(eurodist,method=c("IP"), weights = 1, control = list())
#=================================================
# now fit an ultrametric tree (LS solution, by iterative projection) to a sample data set
a <- eurodist   # a sample data set = distances among European cities
ultraD<-ls_fit_ultrametric(eurodist,method=c("IP"), weights = 1, control = list())
ultraD  # this prints a matrix of model distances
plot(ultra) # plots the fitted ultrametric tree
ultraD<-ls_fit_ultrametric(eurodist,method=c("IP"), weights = 1, control = list())
# gather some R documentation:
>??ultrametric
# gather some R documentation:
??ultrametric
library(clue)      # for tree-fitting & clustering
help(ls_fit_ultrametric)
help(ls_fit_addtree)
methods(plot)
help(plot.dendrogram)
#=================================================
# now fit an ultrametric tree (LS solution, by iterative projection) to a sample data set
a <- eurodist   # a sample data set = distances among European cities
ultraD<-ls_fit_ultrametric(eurodist,method=c("IP"), weights = 1, control = list())
ultraD  # this prints a matrix of model distances
plot(ultra) # plots the fitted ultrametric tree
# calculate the "cophenetic correlation" - the corr of data & model distances
datvec=as.vector(eurodist)
modvec=as.vector(ultraD)
cor(datvec,modvec)
# just for exploration purposes, let's find & draw the tree structure corresponding
#  to the hierarchical clustering derived using the average (UPGMA) method
hc2 <- hclust(eurodist, "ave")
(dend2 <- as.dendrogram(hc2)) # "print()" method
plot(dend2)
u <- cl_ultrametric(hc2)  # compute ultrametric distances from tree structure
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
colnames(sport) <- sport_name
sport
ultraD<-ls_fit_ultrametric(eurodist,method=c("IP"), weights = 1, control = list())
eurodist
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
colnames(sport) <- sport_name[2:length(sport_name)]
rownames(sport) <- sport_name[1:(length(sport_name)-1)]
# load the data set
sport_name <- c("FOOTBALL","BASEBALL","BASKETBALL","TENNIS","CANOEING","SWIMMING","BOXING","VOLLEYBALL","SKIING","SURFING","FENCING","SKINDIVING","ARCHERY","PINGPONG","HORSEBACK","HIKING","BILLIARD","CAMPING","CHECKERS","JUMPROPE")
temp <- scan('SPORTS.txt')
sport <- matrix(NA, 19,19)
sport[upper.tri(sport, diag = TRUE)] <- temp
sport <- t(sport)
colnames(sport) <- sport_name[2:length(sport_name)]
rownames(sport) <- sport_name[1:(length(sport_name)-1)]
View(sport)
library(clue)
sport_dist <- dist(sport)
sport_dist
ultra_sport<-sport_dist(sport_dist,method=c("IP"), weights = 1, control = list())
sport_dist <- dist(sport)
ultra_sport<-ls_fit_ultrametric(sport_dist,method=c("IP"), weights = 1, control = list())
ultra_sport <- ls_fit_ultrametric(sport_dist,method=c("IP"), weights = 1, control = list())
ultra_sport
plot(ultra) # plots the fitted ultrametric tree
plot(ultra_sport) # plots the fitted ultrametric tree
library(clue)
ultra_sport <- ls_fit_ultrametric(sport_dist,method=c("IP"), weights = 1, control = list())
plot(ultra_sport) # plots the fitted ultrametric tree
library(clue)
ultra_sport <- ls_fit_ultrametric(sport_dist,method=c("IP"), weights = 1, control = list())
plot(ultra_sport) # plots the fitted ultrametric tree
## squared distance
datvec=as.vector(sport_dist)
modvec=as.vector(ultra_sport)
cor(datvec,modvec)
ultra_sport <- ls_fit_addtree(sport_dist,method=c("IP"), weights = 1, control = list())
plot(ultra_sport) # plots the fitted ultrametric tree
## squared distance
datvec=as.vector(sport_dist)
modvec=as.vector(ultra_sport)
cor(datvec,modvec)
