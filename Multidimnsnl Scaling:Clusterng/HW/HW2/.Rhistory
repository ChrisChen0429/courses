I()
I(matrix())
?I
a <- c(1,2,3,4)
is.vector(a)
attributes(a)
attributes(a,"testing") <- 'testing'
attributes(a)$`testing` <- 'testing'
attributes(a)
is.vector(a)
is.atomic(a)
is.list(a)
c(NA,NA)
a<-c(NA,NA)
a
a<-c(NA,NA,1)
a
a<-c(NA_real_,NA,1)
a
typeof(a)
type(a)
type
sample(1:47,6,replace = F)
sample(1:47,6,replace = F)
sample(1:47,1,replace = F)
sample(1:47,6,replace = F)
sample(1:47,6,replace = F)
sample(1:47,1,replace = F)
sample(1:47,6,replace = F)
sample(1:47,1,replace = F)
sample(1:47,6,replace = F)
sample(1:47,3,replace = F)
sample(1:47,3,replace = F)
sample(1:47,1,replace = F)
sample(1:47,1,replace = F)
sample(1:47,6,replace = F)
sample(1:47,4,replace = F)
sample(1:47,4,replace = F)
sample(1:47,2,replace = F)
sample(1:47,2,replace = F)
?logistic
??Logistic
library(psych)
install.packages('psych')
logit(6)
1/exp(6)
1/exp(-6)
1/(1+exp(6))
1/(1+exp(-6))
a <- c(5,4,5,4,6,6,5)
sum(a)
install.packages('r4ds')
install.packages('r4ds',dependencies = T)
install.packages('tidyverse')
install.packages("aplpack",dependencies = T)
capabilities()[["tcltk"]]
install.packages("aplpack",dependencies = T)
library(car)
### Search the internet for details about package "car". Then install it.
install.packages('car')
library(car)
library(car)
knitr::opts_chunk$set(echo = TRUE)
data(trees)
attach(trees)
data(trees)
plot(density(trees$Height), main="Density plot of the hight")
data(trees)
1+2
1+2
library(lattice)
library(ggpubr)
install.packages('ggpubr')
library(ggpubr)
library(lattice)
library(aplpack)
install.packages("aplpack",dependencies = T)
library(aplpack)
logistic
?logistic
??logistic
install.packages(c('mice','lattice','pan'))
library(lattice)
library(mice)
install.packages('mice',dependencies = T,type = 'source')
library(mice)
install.packages('pan',type = 'source',dependencies = T)
library(pan)
remove.packages("mice")
if (file.exists(".RData")) file.remove(".RData")
install.packages("mice", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages(c("jomo","mitml","micemd","miceadds","mice"),type = 'source',dependencies = T)
install.packages('mitml')
install.packages('mitml',dependencies = T,type = 's')
install.packages('mitml',dependencies = T,type = 'source')
install.packages(c("broom", "callr", "curl", "FactoMineR", "gmp", "Hmisc", "httpuv", "igraph", "mirt", "msm", "openssl", "ordinal", "prettyunits", "psych", "RcppArmadillo", "RCurl", "rgl", "rjags", "rlang", "Rmpfr", "shiny", "tables", "threejs", "tidyr", "vctrs"))
install.packages(c("boot", "foreign", "MASS", "nlme"), lib="/usr/local/Cellar/r/3.6.2/lib/R/library")
?princomp
setwd("~/Desktop/trial_task")
library(readr)
IPOcases_mergepriceindex200110 <- read_csv("IPOcases_mergepriceindex200110.csv")
View(IPOcases_mergepriceindex200110)
IPOcases_mergepriceindex200110 <- read_csv("IPOcases_mergepriceindex200110.csv")
unique(IPOcases_mergepriceindex200110$statebf)
library(readr)
library(dplyr)
# delete the data fro Alaska and Hawaii
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI'))
View(data)
unique(data$statebf)
library(plotly)
install.packages()
install.packages('plotly')
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
View(df)
df <- IPOcases_mergepriceindex200110
d <- IPOcases_mergepriceindex200110$numberofemployees
d[is.na(d)] <- 0
df$q <- with(df, cut(d, breaks = unique(quantile(d))))
levels(df$q) <- paste(c("1st", "2nd"), "Quantile")
df$q <- as.ordered(df$q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~d, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
p
IPOcases_mergepriceindex200110$long
colnames(data)
knitr::opts_chunk$set(echo = TRUE)
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','numberofemployees','sharesfiledinthismkt','principalamountmil'))
View(data)
summary(data)
4712/10742
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','state'numberofemployees','sharesfiledinthismkt','principalamountmil'))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI'))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
data$numberofemployees <-
data %>% group_by(statebf) %>%
mutate(numberofemployees= ifelse(is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE), numberofemployees))
data
is.na(data$numberofemployees)
all(is.na(data$numberofemployees))
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
#data$numberofemployees <-
data %>% group_by(statebf) %>% mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE)))
data <- data %>% group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
View(data)
View(df)
View(df)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
View(df)
data$numberofemployees_q <- with(data, cut(numberofemployees, quantile(numberofemployees)))
data <- data %>% group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
library(tidyr)
library(readr)
library(dplyr)
library(plotly)
library(tidyr)
IPOcases_mergepriceindex200110 <- read_csv("IPOcases_mergepriceindex200110.csv")
# delete the data fro Alaska and Hawaii, select the useful features
data <- IPOcases_mergepriceindex200110 %>% filter(! statebf %in% c('AK','HI')) %>% select(c('long','lat','statebf','numberofemployees','sharesfiledinthismkt','principalamountmil'))
summary(data)
data <- data %>% drop_na(long,lat) %>%
group_by(statebf) %>%
mutate(numberofemployees= replace(numberofemployees,is.na(numberofemployees), mean(numberofemployees, na.rm=TRUE))) %>%
mutate(sharesfiledinthismkt= replace(sharesfiledinthismkt,is.na(sharesfiledinthismkt), mean(sharesfiledinthismkt, na.rm=TRUE))) %>%
mutate(principalamountmil= replace(principalamountmil,is.na(principalamountmil), mean(principalamountmil, na.rm=TRUE)))
data$numberofemployees_q <- with(data, cut(numberofemployees, quantile(numberofemployees)))
View(data)
quantile(data$numberofemployees)
quantile(data$numberofemployees)
data$numberofemployees
is.na(data$numberofemployees)
!is.na(data$numberofemployees)
all(!is.na(data$numberofemployees))
data$numberofemployees
data$numberofemployees[which(is.na(data$numberofemployees))]
which(is.na(data$numberofemployees))
summary(data)
sum(data$statebf == 'UN')
data$numberofemployees[which(data$statebf)=='UN']
data$numberofemployees[which(data$statebf=='UN')]
data_employee <- data %>% drop_na(numberofemployees)
data_employee
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
View(data_employee)
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~d, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$d/1e6, "d")
) %>%
layout(title = 'IPOo<br>(Click legend to toggle)', geo = g)
p
View(data_employee)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'IPOo<br>', geo = g)
p
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'Number of Employees for IPOs', geo = g)
p
View(df)
View(df)
data_employee <- data %>% drop_na(numberofemployees)
data_employee$numberofemployees_q <- with(data_employee, cut(numberofemployees, quantile(numberofemployees)))
levels(data_employee$numberofemployees_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data_employee$numberofemployees_q <- as.ordered(data_employee$numberofemployees_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~numberofemployees, color = ~numberofemployees_q, hoverinfo = "text") %>%
layout(title = 'Number of Employees for IPOs', geo = g)
p
data$sharesfiledinthismkt_q <- with(data, cut(sharesfiledinthismkt, quantile(sharesfiledinthismkt)))
levels(data$sharesfiledinthismkt_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data$sharesfiledinthismkt_q <- as.ordered(data$sharesfiledinthismkt_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~sharesfiledinthismkt, color = ~sharesfiledinthismkt_q, hoverinfo = "text") %>%
layout(title = 'Shared Filed in this Market for IPOs', geo = g)
p
data$sharesfiledinthismkt_q <- with(data, cut(sharesfiledinthismkt, quantile(sharesfiledinthismkt)))
levels(data$sharesfiledinthismkt_q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data$sharesfiledinthismkt_q <- as.ordered(data$sharesfiledinthismkt_q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(data_employee, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(x = ~long, y = ~lat, size = ~sharesfiledinthismkt, color = ~sharesfiledinthismkt_q, hoverinfo = "text") %>%
layout(title = 'Shared Filed in this Market for IPOs', geo = g)
p
install.packages("mitml")
install.packages('jomo',dependencies = T,type = 'source')
package_version(jomo)
library(utils)
remove.packages('jomo')
remove.packages('mitml')
update.packages(ask=FALSE,
checkBuilt=TRUE,
repos="https://cloud.r-project.org")
install.packages('mitml')
setwd("~/Desktop/yi/professional_study/courses/Multidimnsnl Scaling:Clusterng/HW/HW2")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
View(skills2020)
sk <- skills2020 %>% replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
select(-OTHRE) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
sk <- skills2020 %>% replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
select(-OTHER) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
sk <- skills2020 %>%
select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
skills2020  %>% select(-OTHER)
sk <- skills2020 %>%
select(-OTHER)
sk <- sk %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
sk <- skills2020 %>%
select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
#mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
sk <- skills2020 %>%
select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
#mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
#mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
summary(sk)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
sk <- skills2020 %>%
select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
#mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
#mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
summary(sk)
Rxc <- cor(sk)
round(Rxc,2)
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
N<-nrow(skills2019)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
N<-nrow(skills2020)
M<-ncol(skills2020)
sk<-skills2020[,7:M]
# plus 0 for missing values
M<-ncol(sk)
for (j in 1:M){
cx<-sk[,j]
z<-ifelse(is.na(cx),c(rep(0,N)),cx)
sk[,j]<-z }
sk
# now all values "NA" have been converted to 0
Rx<-cor(sk)
skc<-cbind(sk[,1:4],sk[,6:24])
# plus 0 for missing values
M<-ncol(sk)
for (j in 1:M){
cx<-sk[,j]
z<-ifelse(is.na(cx),c(rep(0,N)),cx)
sk[,j]<-z }
sk
# now all values "NA" have been converted to 0
Rx<-cor(sk)
skc<-cbind(sk[,1:4],sk[,6:24])
Rxc<-cor(skc)
skills <- as.matrix(Rxc)
skills.cr <- princomp(skills, cor = TRUE, scores = TRUE)
print(skills.cr)  ## prints out eigenvalues
plot(skills.cr,type='l')   ## scree plot
P12<-skills.cr$loadings[,1:2]  ## prepare to plot the first two components, with full variable names
plot(P12,pch=' ')  # plot components with blanks at first
text(P12, rownames(Rxc))  # then add full subtest names
N<-nrow(skills2020)
M<-ncol(skills2020)
sk<-skills2020[,7:M]
# plus 0 for missing values
M<-ncol(sk)
for (j in 1:M){
cx<-sk[,j]
z<-ifelse(is.na(cx),c(rep(0,N)),cx)
sk[,j]<-z }
sk
# now all values "NA" have been converted to 0
Rx<-cor(sk)
princ <- princomp(x = sk,cor = T, scores = T)
library(dplyr)
library(readxl)
options(digits=2)
skills2020 <- read_excel("HUDM 5124_class skills data_2016-2020.xlsx")
summary(skills2020)
sk <- skills2020 %>%
select(-OTHER) %>%
replace(., is.na(.), 0) %>%
select(7:(ncol(skills2020)-1)) %>%
#mutate(OTHER = replace(OTHER,! OTHER  %in% c('0','1'),'1')) %>%
#mutate_if(is.character,as.numeric) %>%
select_if(function(col) is.numeric(col) && mean(col)>0)
summary(sk)
Rxc <- cor(sk)
round(Rxc,2)
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
combine(9,2)
combn(3,2)
possible_combination <- combn(9,2)
for (c in 1:ncol(possible_combination)){
combination <- possible_combination[,c]
cur_pair <- p3[,combination]
plot(cur_pair,pch = '')
text(cur_pair,colnames(sk))
}
princ <- princomp(x = sk,cor = T, scores = T)
print(princ$sdev,digits = 2)
plot(princ$sdev, xlab = "Principal Component",ylab = "Eigenvalue",type = "b", main = 'scree plot1')
abline(h=1,col='Red')
plot(cumsum(princ$sdev)/sum(princ$sdev), xlab = "Principal Component",ylab = "Proportion of Variance Explained",type = "b", main = 'scree plot2')
abline(h=0.8,col='Red')
## print out the first 3 components
p3 <- princ$loadings[,1:9]
print(p3)
possible_combination <- combn(9,2)
for (c in 1:ncol(possible_combination)){
combination <- possible_combination[,c]
cur_pair <- p3[,combination]
plot(cur_pair,pch = '')
text(cur_pair,colnames(sk))
}
combn(4,2)
