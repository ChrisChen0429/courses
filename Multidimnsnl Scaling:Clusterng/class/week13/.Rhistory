normal_sample <- c(runif(n = 5,min = 0,max = 0.2),
runif(n = 11,min = 0.2,max = 0.4),
runif(n = 19,min = 0.4,max = 0.6),
runif(n = 26,min = 0.6,max = 0.8),
runif(n = 4,min = 0.8,max = 0.1))
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
normal_sample <- c(runif(n = 5,min = 0,max = 0.2),
runif(n = 11,min = 0.2,max = 0.4),
runif(n = 19,min = 0.4,max = 0.6),
runif(n = 26,min = 0.6,max = 0.8),
runif(n = 4,min = 0.8,max = 0.1))
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Frequeny")
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<40) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<40) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
#geom_histogram(bins = 10) +
geom_density()
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) ++
geom_density()
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) ++
geom_density()
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 5) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
View(dat)
dat$density <- dat$pvalue / sum(dat$pvalue)
View(dat)
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
Q
set.seed(1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<40) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 5) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 15) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
if (i <= 0.4){
Q <- c(Q,2)
}
if (i <= 0.6){
Q <- c(Q,3)
}
if (i <= 0.8){
Q <- c(Q,4)
}
if (i <= 0.1){
Q <- c(Q,5)
}
}
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
else if (i <= 0.4){
Q <- c(Q,2)
}
else if (i <= 0.6){
Q <- c(Q,3)
}
else if (i <= 0.8){
Q <- c(Q,4)
}
else{
Q <- c(Q,5)
}
}
Q
length(Q)
Q/sum(Q)
table(Q)
table(Q) / sum(Q)
round(table(Q) / sum(Q),2)
round(table(Q) / 40,2)
ggplot(dat,aes(x=pvalue))+
#geom_histogram(bins = 20) +
geom_density()
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
(99)
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 30,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
else if (i <= 0.4){
Q <- c(Q,2)
}
else if (i <= 0.6){
Q <- c(Q,3)
}
else if (i <= 0.8){
Q <- c(Q,4)
}
else{
Q <- c(Q,5)
}
}
table(Q)
set.seed(99)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
Q <- c()
for (i in normal_sample){
if (i <= 0.2){
Q <- c(Q,1)
}
else if (i <= 0.4){
Q <- c(Q,2)
}
else if (i <= 0.6){
Q <- c(Q,3)
}
else if (i <= 0.8){
Q <- c(Q,4)
}
else{
Q <- c(Q,5)
}
}
table(Q)
round(table(Q) / 40,2)
0.08+0.25+0.4+0.18+0.1
round(table(Q) / 40,3)
sum(round(table(Q) / 40,3))
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(1)
number_easy = 20
normal_sample <- c()
while (number_easy > 0 & length(normal_sample)<40) {
s <- truncnorm::rtruncnorm(n = 1,a=0,b=1,mean=0.5,sd=0.5)
if (s >= 0.6){
normal_sample <- c(normal_sample,s)
number_easy <- number_easy - 1
}
normal_sample <- c(normal_sample,s)
}
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
seq(0, 1, 5)
seq(1930, 1940, 1)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 20) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density()
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
set.seed(100)
normal_sample <- truncnorm::rtruncnorm(n = 40,a=0,b=1,mean=0.5,sd=0.5)
dat <- data.frame(pvalue=normal_sample)
ggplot(dat,aes(x=pvalue))+
geom_histogram(bins = 10) +
#geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
ggplot(dat,aes(x=pvalue))+
#geom_histogram(bins = 10) +
geom_density() +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
xlim(0,1)+
scale_x_continuous(breaks=c(0,0.2,0.4,0.6,0.8,1)) +
theme_minimal()+
theme(axis.text=element_text(size=20,face="bold"),
axis.title=element_text(size=20,face="bold"),
legend.text =element_text(size=20),
legend.title =element_text(size=20),
legend.key.size = unit(1, "cm"))+
labs(x ="P Value", y = "Density")
logit(c(0.161,0.640,-1.733,-3.616,-3.928,-1.034,-1.299,-0.237,-2.747,0.431)
logit(c(0.161,0.640,-1.733,-3.616,-3.928,-1.034,-1.299,-0.237,-2.747,0.431)
)
logit(c(0.161,0.640,-1.733,-3.616,-3.928,-1.034,-1.299,-0.237,-2.747,0.431))
exp(c(0.161,0.640,-1.733,-3.616,-3.928,-1.034,-1.299,-0.237,-2.747,0.431)) / (1+exp(c(0.161,0.640,-1.733,-3.616,-3.928,-1.034,-1.299,-0.237,-2.747,0.431)))
exp(c(0.686,0.034,-0.227,-0.668,-0.036,0.747)) / (1+exp(c(0.686,0.034,-0.227,-0.668,-0.036,0.747)))
exp(c( 0.554,
-0.167,
0.028,
-1.094,
-0.132,
-0.732 )) / (1+exp(c( 0.554,
-0.167,
0.028,
-1.094,
-0.132,
-0.732 )))
exp(c(  0.738,
-0.726,
0.829,
-1.041,
-0.054,
0.275  )) / (1+exp(c(  0.738,
-0.726,
0.829,
-1.041,
-0.054,
0.275  )))
install.packages('igraph')
install.packages('igraph',dependencies = T,type = 'source')
setwd("~/Desktop/courses/Multidimnsnl Scaling:Clusterng/class/week13")
# R code for NETSCAL algorithm to determine structure of directed graphs
# by James E. Corter,  April 2017
# uses library igraph
# install.packages("igraph")
library(igraph)
