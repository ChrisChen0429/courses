efficient frontier
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),Amat=cbind(rep(1,3),mu,diag(1,3)),bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002,lwd=1) #efficient frontier
}
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),Amat=cbind(rep(1,3),mu,diag(1,3)),bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),lwd=3,col="blue") # efficient frontier
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
set.seed(201801)
for (k in 1:5){
rboot = mvrnorm(2*n,mu=mu,Sigma=sigma)
muboot = colMeans(rboot)
sboot = cov(rboot)
sdPboot = muP
wboot = matrix(0,nrow=400,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)){ # find the optimal portfolios
result = solve.QP(Dmat=2*sboot,dvec=rep(0,3),Amat=cbind(rep(1,3),muboot),bvec=c(1,muP[i]),meq=2)
sdPboot[i] = sqrt(result$value)
wboot[i,] = result$solution
}
lines(sdPboot,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=1) #efficient frontier
}
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),Amat=cbind(rep(1,3),mu,diag(1,3)),bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",lwd=3,col="blue") # efficient frontier
library(MASS)
library(MASS)
library(quadprog)
data = read.csv("Stock_Bond.csv", header = T)
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.
005),cex=1.1,pch="x")
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP <- seq(0.0001,0.002,length.out = 400) # target portfolio return
sdP <- muP
weight <- matrix(1,nrow = 400,ncol = 3)
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,0.002),,lwd=3,col="red")
# efficient frontier
text(sqrt(sigma[1,1]),mu[1],"cat",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.
01,.03),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
muP = seq(min(mu),max(mu),length=400) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=400) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.002),lwd=3,col="blue") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=400) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.0015),lwd=3,col="blue") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=400) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),Amat=cbind(rep(1,3),mu,diag(1,3)),bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.0015),lwd=3,col="blue") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
